import std::env
import std::fs::path::(Path, SEPARATOR)
import std::mirror::ModuleMirror
import std::process
import std::time::DateTime

# A `Path` pointing to the runtime directory.
let RUNTIME_DIRECTORY = ModuleMirror
  .new(ThisModule)
  .source_path
  .directory
  .join('..')
  .join('..')
  .join('src')

# A `Path` to an existing file.
let VALID_FILE = RUNTIME_DIRECTORY.join('std').join('bootstrap.inko')

# A `Path` to an existing directory.
let VALID_DIRECTORY = env.temporary_directory

# A `Path` to a non-existing file.
let INVALID_FILE = Path.new('does_not_exist.inko')

# A `Path` to a non-existing directory.
let INVALID_DIRECTORY = Path.new('does_not_exist')

# A `DateTime` used to indicate an invalid point in time.
let INVALID_TIME = DateTime.new

def temporary_file_path -> Path {
  let tmp = env.temporary_directory
  let id = process.current.identifier

  Path.new(`{tmp}{SEPARATOR}inko-temporary-file-path-{id}`)
}
