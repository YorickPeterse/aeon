import std::operators::Equal
import std::test::*

class Dummy {
  static def new -> Self {
    Self {}
  }
}

impl Equal for Dummy {}

def tests(t: ref Tests) {
  t.group('std::object::Object.same_object?') do (g) {
    g.test('Comparing two objects that do not reside at the same address') {
      let obj1 = Dummy.new
      let obj2 = Dummy.new

      try assert_false(obj1.same_object?(obj2))
    }

    g.test('Comparing two objects that reside at the same address') {
      let obj = Dummy.new

      try assert_true(obj.same_object?(obj))
    }
  }

  t.group('std::object::Object.==') do (g) {
    g.test('Comparing two objects that do not reside at the same address') {
      let obj1 = Dummy.new
      let obj2 = Dummy.new

      try assert_not_equal(obj1, obj2)
    }

    g.test('Comparing two objects that reside at the same address') {
      let obj = Dummy.new

      try assert_equal(obj, obj)
    }
  }

  t.group('std::object::Object.!=') do (g) {
    g.test('Comparing two objects that do not reside at the same address') {
      let obj1 = Dummy.new
      let obj2 = Dummy.new

      try assert_true(obj1 != obj2)
    }

    g.test('Comparing two objects that reside at the same address') {
      let obj = Dummy.new

      try assert_false(obj != obj)
    }
  }

  t.group('std::object::Object.truthy?') do (g) {
    g.test('Checking if an object is truthy') {
      try assert_true(Dummy.new.truthy?)
    }
  }
}
