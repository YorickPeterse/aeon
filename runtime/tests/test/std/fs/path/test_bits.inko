import std::fs::path::bits::(self, SEPARATOR, SEPARATOR_BYTE, ALT_SEPARATOR_BYTE)
import std::os
import std::test::*

def tests(t: ref Tests) {
  if os.windows? {
    t.group('std::fs::path::bits.starts_with_windows_drive_name?') do (g) {
      g.test('Checking if a path starts with a Windows drive name') {
        try assert_true(bits.starts_with_windows_drive_name?('C:/'))
        try assert_true(bits.starts_with_windows_drive_name?('C:\\'))

        try assert_false(bits.starts_with_windows_drive_name?('C:'))
        try assert_false(bits.starts_with_windows_drive_name?('C/'))
        try assert_false(bits.starts_with_windows_drive_name?('C\\'))
      }
    }
  }

  t.group('std::fs::path::bits.path_separator?') do (g) {
    g.test('Checking if a byte is a valid path separator') {
      try assert_true(bits.path_separator?(SEPARATOR_BYTE))

      if not ALT_SEPARATOR_BYTE.negative? {
        try assert_true(bits.path_separator?(ALT_SEPARATOR_BYTE))
      }
    }
  }

  t.group('std::fs::path::bits.bytes_before_last_separator') do (g) {
    g.test('Obtaining the number of bytes without a path separator') {
      try assert_equal(bits.bytes_before_last_separator('foo'), -1)
    }

    g.test('Obtaining the number of bytes with a path separator') {
      let path = 'foo' + SEPARATOR + 'bar'

      try assert_equal(bits.bytes_before_last_separator(path), 3)
    }

    g.test('Obtaining the number of bytes with a trailing path separator') {
      let path = 'foo' + SEPARATOR + 'bar' + SEPARATOR

      try assert_equal(bits.bytes_before_last_separator(path), 3)
    }

    g.test('Obtaining the number of bytes with a leading path separator') {
      let path = SEPARATOR + 'bar' + SEPARATOR

      try assert_equal(bits.bytes_before_last_separator(path), 1)
    }

    g.test('Obtaining the number of bytes with multiple path separators') {
      let path = SEPARATOR + 'bar' + SEPARATOR + SEPARATOR

      try assert_equal(bits.bytes_before_last_separator(path), 1)
    }

    if os.windows? {
      g.test('Obtaining the number of bytes using a Windows drive name') {
        try assert_equal(bits.bytes_before_last_separator('C:/foo'), 3)
      }
    }
  }
}
