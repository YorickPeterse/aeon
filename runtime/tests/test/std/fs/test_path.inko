import std::env
import std::fs::path::(Path, SEPARATOR)
import std::os
import std::test::*
import std::time::DateTime
import test::features
import test::fixtures::(INVALID_TIME, VALID_DIRECTORY, VALID_FILE)

def windows_drives -> Array!(String) {
  Array.new(
    'a:\\', 'b:\\', 'c:\\', 'd:\\', 'e:\\', 'f:\\', 'g:\\', 'h:\\', 'i:\\',
    'j:\\', 'k:\\', 'l:\\', 'm:\\', 'n:\\', 'o:\\', 'p:\\', 'q:\\', 'r:\\',
    's:\\', 't:\\', 'u:\\', 'v:\\', 'w:\\', 'x:\\', 'y:\\', 'z:\\',
    'A:\\', 'B:\\', 'C:\\', 'D:\\', 'E:\\', 'F:\\', 'G:\\', 'H:\\', 'I:\\',
    'J:\\', 'K:\\', 'L:\\', 'M:\\', 'N:\\', 'O:\\', 'P:\\', 'Q:\\', 'R:\\',
    'S:\\', 'T:\\', 'U:\\', 'V:\\', 'W:\\', 'X:\\', 'Y:\\', 'Z:\\',

    'a:/', 'b:/', 'c:/', 'd:/', 'e:/', 'f:/', 'g:/', 'h:/', 'i:/',
    'j:/', 'k:/', 'l:/', 'm:/', 'n:/', 'o:/', 'p:/', 'q:/', 'r:/',
    's:/', 't:/', 'u:/', 'v:/', 'w:/', 'x:/', 'y:/', 'z:/',
    'A:/', 'B:/', 'C:/', 'D:/', 'E:/', 'F:/', 'G:/', 'H:/', 'I:/',
    'J:/', 'K:/', 'L:/', 'M:/', 'N:/', 'O:/', 'P:/', 'Q:/', 'R:/',
    'S:/', 'T:/', 'U:/', 'V:/', 'W:/', 'X:/', 'Y:/', 'Z:/',
  )
}

def tests(t: ref Tests) {
  t.group('std::fs::Path.file?') do (g) {
    g.test('Checking if a Path points to a file') {
      try assert_true(VALID_FILE.file?)
      try assert_false(VALID_DIRECTORY.file?)
    }
  }

  t.group('std::fs::Path.directory?') do (g) {
    g.test('Checking if a Path points to a directory') {
      try assert_true(VALID_DIRECTORY.directory?)
      try assert_false(VALID_FILE.directory?)
    }
  }

  t.group('std::fs::Path.exists?') do (g) {
    g.test('Checking if a file exists') {
      try assert_true(VALID_FILE.exists?)
      try assert_false(Path.new('does-not-exist.inko').exists?)
    }
  }

  t.group('std::fs::Path.to_string') do (g) {
    g.test('Converting a Path to a String') {
      try assert_equal(Path.new('foo.inko').to_string, 'foo.inko')
    }
  }

  t.group('std::fs::Path.size') do (g) {
    g.test('Obtaining the size of an existing file') {
      try assert_greater(try! VALID_FILE.size, 0)
    }

    g.test('Obtaining the size of a non existing file') {
      let path = Path.new('does-not-exist.inko')
      let size = try path.size else -1

      try assert_equal(size, -1)
    }
  }

  t.group('std::fs::Path.==') do (g) {
    g.test('Comparing a Path with another Path') {
      try assert_equal(Path.new('foo.inko'), Path.new('foo.inko'))
      try assert_not_equal(Path.new('foo.inko'), Path.new('bar.inko'))
    }
  }

  t.group('std::fs::Path.to_path') do (g) {
    g.test('Converting a Path to another Path') {
      try assert_equal(VALID_FILE.to_path, VALID_FILE)
    }
  }

  if features.creation_time? {
    t.group('std::fs::Path.created_at') do (g) {
      g.test('Obtaining the creation time of a Path') {
        try assert_not_equal(try VALID_FILE.created_at else INVALID_TIME, INVALID_TIME)
      }
    }
  }

  if features.modification_time? {
    t.group('std::fs::Path.modified_at') do (g) {
      g.test('Obtaining the modification time of a Path') {
        try assert_not_equal(try VALID_FILE.modified_at else INVALID_TIME, INVALID_TIME)
      }
    }
  }

  if features.access_time? {
    t.group('std::fs::Path.accessed_at') do (g) {
      g.test('Obtaining the access time of a Path') {
        try assert_not_equal(try VALID_FILE.accessed_at else INVALID_TIME, INVALID_TIME)
      }
    }
  }

  t.group('std::fs::path::Path.absolute?') do (g) {
    g.test('Checking if a Path is absolute') {
      try assert_false(Path.new('foo').absolute?)
      try assert_false(Path.new('..').absolute?)
      try assert_true(Path.new(SEPARATOR + 'foo').absolute?)

      # On Windows /foo (or any path starting with /) is also absolute.
      try assert_true(Path.new('/foo').absolute?)
    }

    if os.windows? {
      g.test('Checking if a Path with a Windows drive letter is absolute') {
        for drive in windows_drives {
          try assert_true(Path.new(drive + 'foo').absolute?)
        }
      }
    }
  }

  t.group('std::fs::path::Path.relative?') do (g) {
    g.test('Checking if a Path is relative') {
      try assert_true(Path.new('foo').relative?)
      try assert_true(Path.new('..').relative?)
      try assert_false(Path.new(SEPARATOR + 'foo').relative?)
    }

    if os.windows? {
      g.test('Checking if a Path with a Windows drive letter is relative') {
        for drive in windows_drives {
          try assert_false(Path.new(drive + 'foo').relative?)
        }
      }
    }
  }

  t.group('std::fs::path::Path.join') do (g) {
    g.test('Joining a Path with a relative path as a String') {
      let path = Path.new('foo')
      let expected =
        if os.windows? { Path.new('foo\\bar') } else { Path.new('foo/bar') }

      try assert_equal(path.join('bar'), expected)
    }

    g.test('Joining a Path with an absolute path as a String') {
      let path = Path.new('foo')
      let absolute = if os.windows? { '\\bar' } else { '/bar' }

      try assert_equal(path.join(absolute), Path.new(absolute))
    }

    if os.windows? {
      g.test('Joining a Path with an absolute path including a drive letter') {
        let path = Path.new('foo')

        for drive in windows_drives {
          try assert_equal(path.join(drive + 'foo'), Path.new(drive + 'foo'))
        }
      }
    }

    g.test('Joining a Path with a relative path as a Path') {
      let path = Path.new('foo')
      let expected =
        if os.windows? { Path.new('foo\\bar') } else { Path.new('foo/bar') }

      try assert_equal(path.join(Path.new('bar')), expected)
    }

    g.test('Joining a Path with an absolute path as a Path') {
      let path = Path.new('foo')
      let absolute =
        if os.windows? { Path.new('\\bar') } else { Path.new('/bar') }

      try assert_equal(path.join(absolute), absolute)
    }

    g.test('Joining a Path with a trailing field separator') {
      let path = Path.new('foo' + SEPARATOR)
      let expected =
        if os.windows? { Path.new('foo\\bar') } else { Path.new('foo/bar') }

      try assert_equal(path.join('bar'), expected)
    }
  }

  t.group('std::path::Path.directory') do (g) {
    g.test('Obtaining the directory of an absolute Path') {
      if os.windows? {
        try assert_equal(Path.new('C:/foo/bar').directory, Path.new('C:/foo'))
        try assert_equal(Path.new('C:/foo').directory, Path.new('C:/'))
        try assert_equal(Path.new('C:/').directory, Path.new('C:/'))

        try assert_equal(Path.new('C:\\foo\\bar').directory, Path.new('C:\\foo'))
        try assert_equal(Path.new('C:\\foo').directory, Path.new('C:\\'))
        try assert_equal(Path.new('C:\\').directory, Path.new('C:\\'))
      }

      try assert_equal(Path.new('/foo/bar').directory, Path.new('/foo'))
      try assert_equal(Path.new('/foo/bar/..').directory, Path.new('/foo/bar'))
      try assert_equal(Path.new('/foo').directory, Path.new('/'))
      try assert_equal(Path.new('/').directory, Path.new('/'))
    }

    g.test('Obtaining the directory of a Path with trailing separators') {
      if os.windows? {
        try assert_equal(Path.new('C:\\foo\\bar\\').directory, Path.new('C:\\foo'))
        try assert_equal(Path.new('C:\\foo\\').directory, Path.new('C:\\'))

        try assert_equal(Path.new('C:/foo/bar/').directory, Path.new('C:/foo'))
        try assert_equal(Path.new('C:/foo/').directory, Path.new('C:/'))
      }

      try assert_equal(Path.new('/foo/bar/').directory, Path.new('/foo'))
      try assert_equal(Path.new('/foo/').directory, Path.new('/'))
    }

    g.test('Obtaining the directory of a Path containing multiple separators') {
      if os.windows? {
        try assert_equal(
          Path.new('C:\\foo\\\\bar\\\\baz').directory,
          Path.new('C:\\foo\\\\bar')
        )
      }

      try assert_equal(Path.new('/foo//bar//').directory, Path.new('/foo'))
      try assert_equal(Path.new('/foo//bar//baz').directory, Path.new('/foo//bar'))
    }

    g.test('Obtaining the directory of a relative Path') {
      if os.windows? {
        try assert_equal(Path.new('foo\\bar').directory, Path.new('foo'))
      }

      try assert_equal(Path.new('foo/bar').directory, Path.new('foo'))
      try assert_equal(Path.new('foo').directory, Path.new('.'))
      try assert_equal(Path.new('.').directory, Path.new('.'))
      try assert_equal(Path.new('./foo').directory, Path.new('.'))
      try assert_equal(Path.new('').directory, Path.new('.'))
    }
  }

  t.group('std::fs::path::Path.into_path') do (g) {
    g.test('Moving a Path into a new Path') {
      let a = Path.new('foo')
      let b = a.into_path

      try assert_equal(b.to_string, 'foo')
    }
  }
}
