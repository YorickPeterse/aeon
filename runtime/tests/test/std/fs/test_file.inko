import std::conversion::ToString
import std::env
import std::fs::file::(self, ReadOnlyFile, ReadWriteFile, Remove, WriteOnlyFile)
import std::fs::path::(SEPARATOR)
import std::io::Close
import std::mirror
import std::process
import std::test::*
import test::fixtures::(self, VALID_FILE)

def read_string(path: ToString) -> String {
  let file = try! ReadOnlyFile.new(path)

  process.defer { file.close }

  try! file.read_string
}

def close_and_remove_file!(T: Close + Remove)(file: T) {
  file.close

  # If the removal fails that's OK, because in the worst case we just leave the
  # file behind in /tmp.
  try file.remove else Nil
}

def read_only_file(block: do (ReadOnlyFile)) {
  let file = try! ReadOnlyFile.new(VALID_FILE)

  process.defer { file.close }
  block.call(file)
}

def write_only_file(block: do (WriteOnlyFile)) {
  let file = try! WriteOnlyFile.new(fixtures.temporary_file_path)

  process.defer { close_and_remove_file(file) }
  block.call(file)
}

def read_write_file(block: do (ReadWriteFile)) {
  let file = try! ReadWriteFile.new(fixtures.temporary_file_path)

  process.defer { close_and_remove_file(file) }
  block.call(file)
}

def tests(t: ref Tests) {
  t.group('std::fs::file::ReadOnlyFile.new') do (g) {
    g.test('Opening an existing file in read-only mode') {
      try assert_no_throw {
        let file = try ReadOnlyFile.new(VALID_FILE)
        file.close
      }
    }

    g.test('Opening a non-existing file in read-only mode') {
      try assert_throw {
        try ReadOnlyFile.new('this-file-does-not-exist.inko')
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.read_bytes') do (g) {
    g.test('Reading all bytes') {
      read_only_file do (file) {
        let bytes = ByteArray.new
        let read = try! file.read_bytes(bytes)

        try assert_greater(read, 0)
        try assert_equal(bytes.length, read)
      }
    }

    g.test('Reading a limited number of bytes') {
      read_only_file do (file) {
        let bytes = ByteArray.new
        let read = try! file.read_bytes(bytes: bytes, size: 4)

        try assert_equal(read, 4)
        try assert_equal(bytes.length, 4)
      }
    }

    g.test('Reading a negative number of bytes') {
      read_only_file do (file) {
        let bytes = ByteArray.new
        let read = try! file.read_bytes(bytes, size: -1)

        try assert_greater(read, 0)
        try assert_equal(bytes.length, read)
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.read_string') do (g) {
    g.test('Reading all bytes') {
      read_only_file do (file) {
        let string = try! file.read_string

        try assert_greater(string.length, 0)
      }
    }

    g.test('Reading a limited number of bytes') {
      read_only_file do (file) {
        let string = try! file.read_string(4)

        try assert_equal(string.length, 4)
      }
    }

    g.test('Reading an invalid number of bytes') {
      read_only_file do (file) {
        let string = try! file.read_string(size: -1)

        try assert_greater(string.length, 0)
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.seek') do (g) {
    g.test('Seeking to a valid positive offset') {
      read_only_file do (file) {
        let first_chunk = try! file.read_string(3)
        let position = try! file.seek(0)
        let second_chunk = try! file.read_string(3)

        try assert_equal(position, 0)
        try assert_equal(first_chunk, second_chunk)
      }
    }

    g.test('Seeking to a very large positive offset') {
      read_only_file do (file) {
        try assert_throw {
          try file.seek(1_000_000_000_000_000_000_000_000)
        }
      }
    }

    g.test('Seeking to a valid negative offset') {
      read_only_file do (file) {
        try! file.seek(-1)

        let string = try! file.read_string(1)

        try assert_equal(string, "\n")
      }
    }

    g.test('Seeking to an invalid offset') {
      read_only_file do (file) {
        try assert_throw { try file.seek(-10_000) }
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.size') do (g) {
    g.test('Obtaining the size of a file') {
      read_only_file do (file) {
        try assert_greater(try! file.size, 0)
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.path') do (g) {
    g.test('Obtaining the path of a file') {
      read_only_file do (file) {
        try assert_equal(file.path, VALID_FILE)
      }
    }
  }

  t.group('std::fs::file::ReadOnlyFile.close') do (g) {
    g.test('Closing an open file') {
      read_only_file do (file) {
        try assert_equal(file.close, Nil)
      }
    }

    g.test('Closing an already closed file') {
      read_only_file do (file) {
        try assert_equal(file.close, Nil)
        try assert_equal(file.close, Nil)
      }
    }

    g.test('Closing a file will cause read operations to panic') {
      read_only_file do (file) {
        file.close

        try assert_throw { try file.read_string }
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.new') do (g) {
    g.test('Opening a file in write-only mode') {
      try assert_no_throw {
        let file = try WriteOnlyFile.new(fixtures.temporary_file_path)

        close_and_remove_file(file)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.append') do (g) {
    g.test('Opening a file in append-only mode') {
      try assert_no_throw {
        let file = try WriteOnlyFile.append(fixtures.temporary_file_path)

        close_and_remove_file(file)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.write_bytes') do (g) {
    g.test('Writing a number of bytes') {
      write_only_file do (file) {
        let written = try! file.write_bytes(ByteArray.new(105, 110, 107, 111))

        try assert_equal(written, 4)
      }
    }

    g.test('Appending a number of bytes') {
      write_only_file do (file) {
        try! file.write_bytes(ByteArray.new(105, 110))

        let append = try! WriteOnlyFile.append(fixtures.temporary_file_path)

        process.defer {
          close_and_remove_file(append)
        }

        try! append.write_bytes(ByteArray.new(107, 111))
        try! append.flush

        try assert_equal(read_string(append.path), 'inko')
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.write_string') do (g) {
    g.test('Writing a String') {
      write_only_file do (file) {
        let written = try! file.write_string('inko')

        try assert_equal(written, 4)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.flush') do (g) {
    g.test('Flushing any pending writes to disk') {
      write_only_file do (file) {
        try! file.write_string('hello')

        try assert_no_throw { try file.flush }
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.seek') do (g) {
    g.test('Seeking to a valid offset') {
      write_only_file do (file) {
        try! file.write_string('hello')
        try! file.seek(1)
        try! file.write_string('a')

        try assert_equal(read_string(file.path), 'hallo')
      }
    }

    g.test('Seeking to an invalid offset') {
      write_only_file do (file) {
        try assert_throw { try file.seek(-10_000) }
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.size') do (g) {
    g.test('Obtaining the size of a file') {
      write_only_file do (file) {
        try assert_equal(try! file.size, 0)
      }
    }

    g.test('Obtaining the size of a file after a write') {
      write_only_file do (file) {
        try! file.write_string('hello')

        try assert_equal(try! file.size, 5)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.path') do (g) {
    g.test('Obtaining the path of a file') {
      write_only_file do (file) {
        try assert_equal(file.path, fixtures.temporary_file_path)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.close') do (g) {
    g.test('Closing an open file') {
      write_only_file do (file) {
        try assert_equal(file.close, Nil)
      }
    }

    g.test('Closing an already closed file') {
      write_only_file do (file) {
        try assert_equal(file.close, Nil)
        try assert_equal(file.close, Nil)
      }
    }
  }

  t.group('std::fs::file::WriteOnlyFile.remove') do (g) {
    g.test('Removing an existing file') {
      write_only_file do (file) {
        try! file.remove

        try assert_false(file.path.exists?)
      }
    }

    g.test('Removing an already removed file') {
      write_only_file do (file) {
        try! file.remove

        try assert_throw { try file.remove }
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.new') do (g) {
    g.test('Opening a file in read-write mode') {
      try assert_no_throw {
        let file = try ReadWriteFile.new(fixtures.temporary_file_path)

        close_and_remove_file(file)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.append') do (g) {
    g.test('Opening a file in read-append mode') {
      try assert_no_throw {
        let file = try ReadWriteFile.append(fixtures.temporary_file_path)

        close_and_remove_file(file)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.read_bytes') do (g) {
    g.test('Reading all bytes from a file') {
      read_write_file do (file) {
        let bytes = ByteArray.new

        try! file.write_string('inko')
        try! file.seek(0)
        try! file.read_bytes(bytes)

        try assert_equal(bytes, ByteArray.new(105, 110, 107, 111))
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.read_string') do (g) {
    g.test('Reading all bytes from a file') {
      read_write_file do (file) {
        try! file.write_string('inko')
        try! file.seek(0)

        try assert_equal(try! file.read_string, 'inko')
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.write_bytes') do (g) {
    g.test('Writing a number of bytes') {
      read_write_file do (file) {
        try! file.write_bytes(ByteArray.new(97, 98))

        try assert_equal(try! file.size, 2)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.write_string') do (g) {
    g.test('Writing a String') {
      read_write_file do (file) {
        try! file.write_string('ab')

        try assert_equal(try! file.size, 2)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.flush') do (g) {
    g.test('Flushing any pending writes to disk') {
      read_write_file do (file) {
        try! file.write_string('hello')
        try! file.flush
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.seek') do (g) {
    g.test('Seeking to a valid offset') {
      read_write_file do (file) {
        try! file.write_string('hello')
        try! file.seek(1)
        try! file.write_string('a')
        try! file.seek(0)

        try assert_equal(try! file.read_string, 'hallo')
      }
    }

    g.test('Seeking to an invalid offset') {
      read_write_file do (file) {
        try assert_throw { try file.seek(-10_000) }
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.size') do (g) {
    g.test('Obtaining the size of a file') {
      read_write_file do (file) {
        try assert_equal(try! file.size, 0)
      }
    }

    g.test('Obtaining the size of a file after a write') {
      read_write_file do (file) {
        try! file.write_string('ab')

        try assert_equal(try! file.size, 2)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.path') do (g) {
    g.test('Obtaining the path of a file') {
      read_write_file do (file) {
        try assert_equal(file.path, fixtures.temporary_file_path)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.close') do (g) {
    g.test('Closing an open file') {
      read_write_file do (file) {
        try assert_equal(file.close, Nil)
      }
    }

    g.test('Closing an already closed file') {
      read_write_file do (file) {
        try assert_equal(file.close, Nil)
        try assert_equal(file.close, Nil)
      }
    }
  }

  t.group('std::fs::file::ReadWriteFile.remove') do (g) {
    g.test('Removing an existing file') {
      read_write_file do (file) {
        try! file.remove

        try assert_false(file.path.exists?)
      }
    }

    g.test('Removing an already removed file') {
      read_write_file do (file) {
        try! file.remove

        try assert_throw { try file.remove }
      }
    }
  }

  t.group('std::fs::file.remove') do (g) {
    g.test('Removing an existing file') {
      write_only_file do (f) {
        try! file.remove(f.path)

        try assert_false(f.path.exists?)
      }
    }

    g.test('Removing a non-existing file') {
      let path = fixtures.temporary_file_path

      try assert_throw { try file.remove(path) }
    }
  }

  t.group('std::fs::file.copy') do (g) {
    g.test('Copying an existing file') {
      write_only_file do (f) {
        let new_path =
          `{f.path.to_string}{process.current.identifier.to_string}`.into_path

        process.defer {
          try file.remove(new_path) else Nil
        }

        try! file.copy(f.path, new_path)

        try assert_true(f.path.exists?)
        try assert_true(new_path.exists?)
      }
    }

    g.test('Copying a non-existing file') {
      try assert_throw { try file.copy('does-not-exist', 'foo') }
    }
  }
}
