import std::format::(DefaultFormatter, MAX_DEPTH, PLACEHOLDER)
import std::test::*

def tests(t: ref Tests) {
  t.group('std::format::DefaultFormatter.push') do (g) {
    g.test('Pushing a String into the underlying buffer') {
      let fmt = DefaultFormatter.new

      fmt.push('hello')

      try assert_equal(fmt.to_string, 'hello')
    }
  }

  t.group('std::format::DefaultFormatter.descend') do (g) {
    g.test('Formatting an object when the nesting level is not too great') {
      let fmt = DefaultFormatter.new

      fmt.descend {
        fmt.push('hello')
      }

      try assert_equal(fmt.to_string, 'hello')
    }

    g.test('Formatting an object when the nesting level is too great') {
      let fmt = DefaultFormatter.new

      let mut block = {
        fmt.push('hello')
        Nil
      }

      let mut index = 0

      # Generate a chain of calls to "descend", at least MAX_DEPTH levels deep.
      while index < MAX_DEPTH {
        block = {
          fmt.descend { block.call }
          Nil
        }

        index += 1
      }

      fmt.descend(block)

      try assert_equal(fmt.to_string, PLACEHOLDER)
    }
  }
}
