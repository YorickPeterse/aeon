import std::hash::Hasher
import std::test::*

def tests(t: ref Tests) {
  t.group('std::array::Array.new') do (g) {
    g.test('Creating an empty Array') {
      try assert_equal(Array.new.length, 0)
    }

    g.test('Creating an Array with one value') {
      try assert_equal(Array.new(10).length, 1)
    }

    g.test('Creating an Array with multiple values') {
      try assert_equal(Array.new(10, 20, 30).length, 3)
    }
  }

  t.group('std::array::Array.filled') do (g) {
    g.test('Creating an Array filled with no values') {
      try assert_equal(Array.filled(amount: 0, value: 1), Array.new)
    }

    g.test('Creating an Array filled with values') {
      try assert_equal(Array.filled(amount: 2, value: 1), Array.new(1, 1))
    }

    g.test('Creating an Array with a negative fill amount') {
      try assert_panic('Array.filled(amount: -2, value: 1)')
    }
  }

  t.group('std::array::Array.clear') do (g) {
    g.test('Removing all values from an Array') {
      let numbers = Array.new(10, 20, 30)

      numbers.clear
      try assert_equal(numbers, Array.new)
    }
  }

  t.group('std::array::Array.push') do (g) {
    g.test('Adding a value to the end of an Array') {
      let numbers = Array.new

      numbers.push(10)
      numbers.push(20)

      try assert_equal(numbers, Array.new(10, 20))
    }
  }

  t.group('std::array::Array.pop') do (g) {
    g.test('Removing a value from the end of an Array') {
      let numbers = Array.new(10, 20)

      try assert_equal(numbers.pop, Option.some(20))
      try assert_equal(numbers, Array.new(10))
    }
  }

  t.group('std::array::Array.remove_at') do (g) {
    g.test('Removing a value using an existing index') {
      let numbers = Array.new(10, 20)

      try assert_equal(numbers.remove_at(0), 10)
      try assert_equal(numbers, Array.new(20))
    }

    g.test('Removing a value using a non-existing index') {
      try assert_panic('Array.new(10).remove_at(1)')
    }
  }

  t.group('std::array::Array.append') do (g) {
    g.test('Appending all the values of one Array to another Array') {
      let first = Array.new(10, 20, 30)
      let second = Array.new(40, 50, 60)

      first.append(second)

      try assert_equal(first, Array.new(10, 20, 30, 40, 50, 60))
    }
  }

  t.group('std::array::Array.length') do (g) {
    g.test('Obtaining the number of values in an Array') {
      try assert_equal(Array.new.length, 0)
      try assert_equal(Array.new(10).length, 1)
      try assert_equal(Array.new(10, 20, 30).length, 3)
    }
  }

  t.group('std::array::Array.empty?') do (g) {
    g.test('Checking if an Array is empty or not') {
      try assert_true(Array.new.empty?)
      try assert_false(Array.new(10).empty?)
    }
  }

  t.group('std::array::Array.[]') do (g) {
    g.test('Returning the value of an existing index') {
      let numbers = Array.new(10, 20, 30)

      try assert_equal(numbers[0], 10)
      try assert_equal(numbers[1], 20)
      try assert_equal(numbers[2], 30)
    }

    g.test('Returning the value of a non-existing index') {
      try assert_panic('Array.new(10)[1]')
    }

    g.test('Returning the value of an existing negative index') {
      let numbers = Array.new(10, 20, 30)

      try assert_equal(numbers[-1], 30)
      try assert_equal(numbers[-2], 20)
      try assert_equal(numbers[-3], 10)
      try assert_equal(numbers[-4], 30)
      try assert_equal(numbers[-5], 20)
      try assert_equal(numbers[-6], 10)
    }
  }

  t.group('std::array::Array.get') do (g) {
    g.test('Returning the value of an existing index') {
      let numbers = Array.new(10, 20, 30)

      try assert_equal(numbers.get(0), Option.some(10))
      try assert_equal(numbers.get(1), Option.some(20))
      try assert_equal(numbers.get(2), Option.some(30))
    }

    g.test('Returning the value of a non-existing index') {
      try assert_true(Array.new(10).get(1).none?)
    }

    g.test('Returning the value of a non-existing negative index') {
      let array: Array!(Int) = Array.new

      try assert_true(array.get(-2).none?)
    }

    g.test('Returning the value of a non-existing very large index') {
      try assert_panic(
        '
        Array
          .new(10)
          .get(340_282_366_920_938_463_463_374_607_431_768_211_455)
        '
      )
    }

    g.test('Returning the value of an existing negative index') {
      let numbers = Array.new(10, 20, 30)

      try assert_equal(numbers.get(-1), Option.some(30))
      try assert_equal(numbers.get(-2), Option.some(20))
      try assert_equal(numbers.get(-3), Option.some(10))
      try assert_equal(numbers.get(-4), Option.some(30))
      try assert_equal(numbers.get(-5), Option.some(20))
      try assert_equal(numbers.get(-6), Option.some(10))
    }
  }

  t.group('std::array::Array.[]=') do (g) {
    g.test('Setting the value of non-existing index') {
      let numbers = Array.new

      numbers[0] = 1

      try assert_equal(numbers, Array.new(1))
    }

    g.test('Setting the value of an out-of-bounds index') {
      try assert_panic('Array.new[2] = 1')
    }

    g.test('Setting the value of a negative index using an empty Array') {
      let numbers = Array.new

      numbers[-1] = 1

      try assert_equal(numbers, Array.new(1))
    }

    g.test('Setting the value of a negative index using a non-empty Array') {
      let numbers = Array.new(10, 20, 30)

      numbers[-1] = 60
      numbers[-2] = 50

      try assert_equal(numbers, Array.new(10, 50, 60))
    }
  }

  t.group('std::array::Array.to_array') do (g) {
    g.test('Converting an Array to another Array') {
      let numbers = Array.new(10, 20, 30)

      try assert_equal(numbers, Array.new(10, 20, 30))
    }
  }

  t.group('std::array::Array.==') do (g) {
    g.test('Comparing two equal Arrays') {
      try assert_equal(Array.new(10, 20), Array.new(10, 20))
    }

    g.test('Comparing two Arrays with a different length') {
      try assert_not_equal(Array.new(10), Array.new(10, 20))
    }

    g.test('Comparing two Arrays that are not equal but have the same length') {
      try assert_not_equal(Array.new(10), Array.new(20))
    }
  }

  t.group('std::array::Array.iter') do (g) {
    g.test('Iterating over an Array') {
      let numbers = Array.new(10, 20, 30)
      let iter = numbers.iter

      try assert_equal(iter.next, Option.some(10))
      try assert_equal(iter.next, Option.some(20))
      try assert_equal(iter.next, Option.some(30))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::array::Array.reverse_iter') do (g) {
    g.test('Iterating over an Array in reverse order') {
      let numbers = Array.new(10, 20, 30)
      let iter = numbers.reverse_iter

      try assert_equal(iter.next, Option.some(30))
      try assert_equal(iter.next, Option.some(20))
      try assert_equal(iter.next, Option.some(10))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::array::Array.contains?') do (g) {
    g.test('Checking if an Array contains a given value') {
      try assert_false(Array.new.contains?(10))
      try assert_false(Array.new(10).contains?(20))
      try assert_true(Array.new(10, 20).contains?(10))
    }
  }

  t.group('std::array::Array.hash') do (g) {
    g.test('Hashing an Array') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      Array.new('foo').hash(ref hasher1)
      Array.new('foo').hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }

  t.group('std::array::Array.swap') do (g) {
    g.test('Swapping a value in an Array') {
      let numbers = Array.new(10, 20)
      let old_val = numbers.swap(1, 40)

      try assert_equal(old_val, 20)
      try assert_equal(numbers[1], 40)
    }

    g.test('Swapping a value using an out of bounds index') {
      try assert_panic('Array.new.swap(0, 10)')
    }
  }
}
