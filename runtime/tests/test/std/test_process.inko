import std::process::(self, Process)
import std::test::*
import std::time::Instant
import std::mirror::ObjectMirror

def tests(t: ref Tests) {
  t.group('std::process.current') do (g) {
    g.test('Obtaining the current Process') {
      try assert_true(ObjectMirror.new(process.current).instance_of?(Process))
    }
  }

  t.group('std::process::Process.send') do (g) {
    g.test('Sending a message to a Process') {
      let message = process.current.send('testing')
      let received = process.receive as String

      try assert_equal(message, 'testing')
      try assert_equal(received, message)
    }
  }

  t.group('std::process::Process.identifier') do (g) {
    g.test('Obtaining the identifier of a process') {
      try assert_true(process.current.identifier.positive?)
    }
  }

  t.group('std::process.receive') do (g) {
    g.test('Receiving a message') {
      process.current.send('testing')

      let received = process.receive as String

      try assert_equal(received, 'testing')
    }
  }

  t.group('std::process.receive_timeout') do (g) {
    g.test('Receiving a message when there is a message') {
      process.current.send('testing')

      let received = try process.receive_timeout(0.001) else 'nope'

      try assert_equal(received as String, 'testing')
    }

    g.test('Receiving a message when there is no message') {
      let received = try process.receive_timeout(0.001) else 'nope'

      try assert_equal(received as String, 'nope')
    }
  }

  t.group('std::process.spawn') do (g) {
    g.test('Spawning a process') {
      let proc = process.spawn {}

      try assert_true(ObjectMirror.new(proc).instance_of?(Process))
    }
  }

  t.group('std::process.blocking') do (g) {
    g.test('Performing a blocking operation') {
      try assert_equal(process.blocking({ 10 }), 10)
    }
  }

  t.group('std::process.suspend') do (g) {
    g.test('Suspending a process for a minimum amount of time') {
      let start = Instant.new
      let wait = 0.01

      process.suspend(wait)

      let duration = start.elapsed.to_float

      # Due to the use of floats the 0.01 might be rounded down to 0.009999 or a
      # similar value. This means we can't simply assert that `duration >=
      # 0.01`.
      try assert_true(duration >= 0.005)
    }
  }

  t.group('std::process.terminate') do (g) {
    g.test('Terminating the current process') {
      let proc = process.spawn {
        let parent = process.receive as Process

        process.terminate

        # This code will never run, unless `process.terminate` somehow doesn't
        # terminate the current process.
        parent.send(True)
      }

      proc.send(process.current)

      # Only if `process.terminate` _does not_ terminate the process will we
      # receive a message.
      let message = try process.receive_timeout(0.01) else False

      try assert_true((message as Boolean).false?)
    }
  }

  t.group('std::process.defer') do (g) {
    g.test('Deferring the execution of a Block') {
      let mut number = 0

      do {
        process.defer {
          # This will be executed _after_ `number = 1` below.
          number = 2
        }

        number = 1
      }.call

      try assert_equal(number, 2)
    }
  }

  t.group('std::process.pinned') do (g) {
    g.test('Pinning a process to an OS thread') {
      # There is no reliable way of testing whether we are truly pinned, without
      # using some sort of FFI example that uses thread-local storage. Since
      # that is far too much to test here, we'll just test that the block
      # returns the proper value.
      try assert_equal(process.pinned({ 10 }), 10)
    }
  }

  t.group('std::process.panic') do (g) {
    g.test('Causing a process to panic') {
      try assert_panic(
        "
        import std::process

        process.panic('This is a panic')
        "
      )
    }
  }
}
