import std::test::*

def tests(t: ref Tests) {
  t.group('std::byte_array::ByteArray.new') do (g) {
    g.test('Creating a new ByteArray') {
      let bytes = ByteArray.new(10)

      try assert_equal(bytes.length, 1)
    }

    g.test('Creating a ByteArray with invalid bytes') {
      try assert_panic('ByteArray.new(300)')
    }
  }

  t.group('std::byte_array::ByteArray.filled') do (g) {
    g.test('Creating a ByteArray filled with no values') {
      try assert_equal(ByteArray.filled(amount: 0, value: 1), ByteArray.new)
    }

    g.test('Creating a ByteArray filled with values') {
      try assert_equal(ByteArray.filled(amount: 2, value: 1), ByteArray.new(1, 1))
    }

    g.test('Creating a ByteArray with a negative fill amount') {
      try assert_panic('ByteArray.filled(amount: -2, value: 1)')
    }
  }

  t.group('std::byte_array::ByteArray.clear') do (g) {
    g.test('Removing all values from a ByteArray') {
      let bytes = ByteArray.new(10, 20, 30)

      bytes.clear

      try assert_equal(bytes, ByteArray.new)
    }
  }

  t.group('std::byte_array::ByteArray.push') do (g) {
    g.test('Pushing a byte onto the end of a ByteArray') {
      let bytes = ByteArray.new

      bytes.push(10)
      bytes.push(20)

      try assert_equal(bytes, ByteArray.new(10, 20))
    }
  }

  t.group('std::byte_array::ByteArray.pop') do (g) {
    g.test('Removing a value from the end of a ByteArray') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes.pop, Option.some(20))
      try assert_equal(bytes, ByteArray.new(10))

      try assert_equal(bytes.pop, Option.some(10))
      try assert_equal(bytes, ByteArray.new)
    }
  }

  t.group('std::byte_array::ByteArray.remove_at') do (g) {
    g.test('Removing the value of an existing index') {
      let bytes = ByteArray.new(10)

      try assert_equal(bytes.remove_at(0), 10)
      try assert_equal(bytes, ByteArray.new)
    }

    g.test('Removing the value of an out-of-bounds index') {
      try assert_panic('ByteArray.new(10).remove_at(5)')
    }

    g.test('Removing the value of a negative index') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes.remove_at(-2), 10)
      try assert_equal(bytes, ByteArray.new(20))
    }
  }

  t.group('std::byte_array::ByteArray.[]') do (g) {
    g.test('Returning the value of an existing index') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes[0], 10)
      try assert_equal(bytes[1], 20)
    }

    g.test('Returning the value of a non-existing index') {
      try assert_panic('ByteArray.new(10, 20)[3]')
    }

    g.test('Returning the value of a negative index') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes[-1], 20)
      try assert_equal(bytes[-2], 10)
      try assert_equal(bytes[-3], 20)
    }
  }

  t.group('std::byte_array::ByteArray.get') do (g) {
    g.test('Returning the value of an existing index') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes.get(0), Option.some(10))
      try assert_equal(bytes.get(1), Option.some(20))
    }

    g.test('Returning the value of a non-existing index') {
      let bytes = ByteArray.new(10, 20)

      try assert_true(bytes.get(4).none?)
    }

    g.test('Returning the value of a non-existing negative index') {
      let bytes = ByteArray.new

      try assert_true(bytes.get(-2).none?)
    }

    g.test('Returning the value of a non-existing very large index') {
      try assert_panic(
        '
        ByteArray
          .new(10)
          .get(340_282_366_920_938_463_463_374_607_431_768_211_455)
        '
      )
    }

    g.test('Returning the value of a negative index') {
      let bytes = ByteArray.new(10, 20)

      try assert_equal(bytes.get(-1), Option.some(20))
      try assert_equal(bytes.get(-2), Option.some(10))
      try assert_equal(bytes.get(-3), Option.some(20))
    }
  }

  t.group('std::byte_array::ByteArray.[]=') do (g) {
    g.test('Setting the value of a valid index') {
      let bytes = ByteArray.new(10, 20)

      bytes[0] = 30
      bytes[1] = 40

      try assert_equal(bytes, ByteArray.new(30, 40))
    }

    g.test('Setting the value of an invalid index') {
      try assert_panic('ByteArray.new(10)[4] = 1')
    }
  }

  t.group('std::byte_array::ByteArray.to_string') do (g) {
    g.test('Converting a ByteArray to a String') {
      let bytes = ByteArray.new(105, 110, 107, 111)

      try assert_equal(bytes.to_string, 'inko')
    }

    g.test('Converting a ByteArray with invalid UTF-8 sequences to a String') {
      let bytes = ByteArray
        .new(72, 101, 108, 108, 111, 32, 240, 144, 128, 87, 111, 114, 108, 100)

      try assert_equal(bytes.to_string, "Hello ï¿½World")
    }
  }

  t.group('std::byte_array::ByteArray.drain_to_string') do (g) {
    g.test('Draining a ByteArray into a String') {
      let bytes = ByteArray.new(105, 110, 107, 111)

      try assert_equal(bytes.drain_to_string, 'inko')
      try assert_equal(bytes, ByteArray.new)
    }
  }

  t.group('std::byte_array::ByteArray.to_array') do (g) {
    g.test('Converting a ByteArray to an Array') {
      let bytes = ByteArray.new(105, 110, 107, 111)

      try assert_equal(bytes.to_array, Array.new(105, 110, 107, 111))
    }
  }

  t.group('std::byte_array::ByteArray.==') do (g) {
    g.test('Comparing two identical ByteArrays') {
      try assert_equal(ByteArray.new(10), ByteArray.new(10))
    }

    g.test('Comparing two ByteArrays with a different length') {
      try assert_not_equal(ByteArray.new, ByteArray.new(10))
    }
  }

  t.group('std::byte_array::ByteArray.length') do (g) {
    g.test('Obtaining the number of bytes in a ByteArray') {
      let bytes = ByteArray.new(10, 20, 30)

      try assert_equal(bytes.length, 3)
    }
  }

  t.group('std::byte_array::ByteArray.iter') do (g) {
    g.test('Iterating over the bytes in a ByteArray') {
      let bytes = ByteArray.new(10, 20)
      let iter = bytes.iter

      try assert_equal(iter.next, Option.some(10))
      try assert_equal(iter.next, Option.some(20))
      try assert_true(iter.next.none?)
    }
  }

  t.group('std::byte_array::ByteArray.slice') do (g) {
    g.test('Slicing a ByteArray with a positive start position') {
      let bytes = 'hello_world'.to_byte_array

      try assert_equal(bytes.slice(0, 5), 'hello'.to_byte_array)
      try assert_equal(bytes.slice(0, 20), 'hello_world'.to_byte_array)
    }

    g.test('Slicing a ByteArray with a negative start position') {
      let bytes = 'hello_world'.to_byte_array

      try assert_equal(bytes.slice(-5, 2), 'wo'.to_byte_array)
      try assert_equal(bytes.slice(-5, 5), 'world'.to_byte_array)
      try assert_equal(bytes.slice(-1, 5), 'd'.to_byte_array)
    }
  }
}
