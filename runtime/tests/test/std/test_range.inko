import std::range
import std::test::*

def tests(t: ref Tests) {
  t.group('std::range::Range.start') do (g) {
    g.test('Obtaining the start of a Range') {
      let range = Range.new(start: 1, end: 10)

      try assert_equal(range.start, 1)
    }
  }

  t.group('std::range::Range.end') do (g) {
    g.test('Obtaining the end of a Range') {
      let range = Range.new(start: 1, end: 10)

      try assert_equal(range.end, 10)
    }
  }

  t.group('std::range::Range.==') do (g) {
    g.test('Comparing two identical Ranges') {
      let range1 = Range.new(start: 1, end: 10)
      let range2 = Range.new(start: 1, end: 10)

      try assert_equal(range1, range2)
    }

    g.test('Comparing two different Ranges') {
      let range1 = Range.new(start: 1, end: 10)
      let range2 = Range.new(start: 1, end: 15)

      try assert_not_equal(range1, range2)
    }
  }

  t.group('std::range::Range.to_array') do (g) {
    g.test('Converting a Range with the same start and end to an Array') {
      let range = Range.new(start: 1, end: 1)

      try assert_equal(range.to_array, Array.new(1))
    }

    g.test('Converting a Range with a different start and end to an Array') {
      let range = Range.new(start: 1, end: 3)

      try assert_equal(range.to_array, Array.new(1, 2, 3))
    }

    g.test('Converting a Range with a smaller end to an Array') {
      let range = Range.new(start: 1, end: -5)

      try assert_equal(range.to_array, Array.new)
    }
  }

  t.group('std::integer::Int...') do (g) {
    g.test('Generating a Range of Int objects') {
      let range = 1..3

      try assert_equal(range.start, 1)
      try assert_equal(range.end, 3)
    }
  }

  t.group('std::range::Range.cover?') do (g) {
    g.test('Checking if a Range covers a value') {
      let range = 1..10

      try assert_false(range.cover?(0))
      try assert_false(range.cover?(11))

      try assert_true(range.cover?(1))
      try assert_true(range.cover?(5))
      try assert_true(range.cover?(10))
    }
  }
}
