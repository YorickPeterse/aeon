import std::compiler::ast::body::Body
import std::compiler::config::Config
import std::compiler::diagnostics::Diagnostics
import std::compiler::module_name::ModuleName
import std::compiler::module_parser::*
import std::compiler::parser::Parser
import std::pair::Pair
import std::fs::file::(self, WriteOnlyFile)
import std::process
import std::test::*
import test::fixtures::(self, RUNTIME_DIRECTORY, VALID_FILE)
import std::stdio::stdout

def parse(input: String) -> Body {
  try! Parser.new(input: input, file: 'test.inko', parse_comments: False).parse
}

def config -> Config {
  let config = Config.new

  config.add_source_directory(RUNTIME_DIRECTORY)

  config
}

def tests(t: Tests) {
  t.group('std::compiler::module_parser::ParsedModule.name') do (g) {
    g.test('Obtaining the name of a parsed module') {
      let body = parse('')
      let name = ModuleName.new(Array.new('foo'))
      let module = ParsedModule.new(name: name, ast: body)

      try assert_equal(module.name, name)
    }
  }

  t.group('std::compiler::module_parser::ParsedModule.ast') do (g) {
    g.test('Obtaining the AST of a parsed module') {
      let body = parse('')
      let name = ModuleName.new(Array.new('foo'))
      let module = ParsedModule.new(name: name, ast: body)

      try assert_true(module.ast.same_object?(body))
    }
  }

  t.group('std::compiler::module_parser::ParsedModule.location') do (g) {
    g.test('Obtaining the source location of a parsed module') {
      let body = parse('')
      let name = ModuleName.new(Array.new('foo'))
      let module = ParsedModule.new(name: name, ast: body)

      try assert_true(module.location.same_object?(body.location))
    }
  }

  t.group('std::compiler::module_parser::ParseSource.parse') do (g) {
    g.test('Parsing a valid source snippet') {
      let name = ModuleName.new(Array.new('foo'))

      ParseSource.new(name: name, source: 'foo', path: 'test.inko').parse

      let pair = process.receive as Pair!(ParsedModule, Diagnostics)

      try assert_equal(pair.0.name.to_string, 'foo')
      try assert_equal(pair.0.location.file.to_string, 'test.inko')
      try assert_true(pair.0.ast.children.length > 1)
      try assert_false(pair.1.errors?)
    }

    g.test('Parsing an invalid source snippet') {
      let name = ModuleName.new(Array.new('foo'))

      ParseSource.new(name: name, source: '10 +', path: 'test.inko').parse

      let pair = process.receive as Pair!(ParsedModule, Diagnostics)

      try assert_equal(pair.0.name.to_string, 'foo')
      try assert_equal(pair.0.location.file.to_string, 'test.inko')
      try assert_true(pair.0.ast.children.empty?)
      try assert_true(pair.1.errors?)
    }
  }

  t.group('std::compiler::module_parser::ParseSource.read_source') do (g) {
    g.test('Reading the source of a valid snippet') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseSource.new(name: name, source: 'foo', path: 'test.inko')
      let diagnostics = Diagnostics.new
      let bytes = request.read_source(diagnostics)

      try assert_true(diagnostics.empty?)
      try assert_false(bytes.empty?)
    }
  }

  t.group('std::compiler::module_parser::ParseSource.name') do (g) {
    g.test('Obtaining the name of the module to parse') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseSource.new(name: name, source: 'foo', path: 'test.inko')

      try assert_equal(request.name, name)
    }
  }

  t.group('std::compiler::module_parser::ParseSource.path') do (g) {
    g.test('Obtaining the path of the module to parse') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseSource.new(name: name, source: 'foo', path: 'test.inko')

      try assert_equal(request.path.to_string, 'test.inko')
    }
  }

  t.group('std::compiler::module_parser::ParseSource.reply_to') do (g) {
    g.test('Obtaining the process to reply to') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseSource.new(name: name, source: 'foo', path: 'test.inko')

      try assert_equal(request.reply_to.identifier, process.current.identifier)
    }
  }

  t.group('std::compiler::module_parser::ParseFile.parse') do (g) {
    g.test('Parsing a valid file') {
      let name = ModuleName.new(Array.new('foo'))

      ParseFile.new(name: name, path: VALID_FILE).parse

      let pair = process.receive as Pair!(ParsedModule, Diagnostics)

      try assert_equal(pair.0.name.to_string, 'foo')
      try assert_equal(pair.0.location.file, VALID_FILE)
      try assert_true(pair.0.ast.children.length > 1)
      try assert_false(pair.1.errors?)
    }

    g.test('Parsing an invalid file') {
      let name = ModuleName.new(Array.new('foo'))

      ParseFile.new(name: name, path: 'kittens.inko').parse

      let pair = process.receive as Pair!(ParsedModule, Diagnostics)

      try assert_equal(pair.0.name.to_string, 'foo')
      try assert_equal(pair.0.location.file.to_string, 'kittens.inko')
      try assert_true(pair.0.ast.children.empty?)
      try assert_true(pair.1.errors?)
    }
  }

  t.group('std::compiler::module_parser::ParseFile.read_source') do (g) {
    g.test('Reading the source of a valid file') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseFile.new(name: name, path: VALID_FILE)
      let diagnostics = Diagnostics.new
      let bytes = request.read_source(diagnostics)

      try assert_true(diagnostics.empty?)
      try assert_false(bytes.empty?)
    }

    g.test('Reading the source of an invalid file') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseFile.new(name: name, path: 'kittens.inko')
      let diagnostics = Diagnostics.new
      let bytes = request.read_source(diagnostics)

      try assert_true(diagnostics.errors?)
      try assert_true(bytes.empty?)
    }
  }

  t.group('std::compiler::module_parser::ParseFile.name') do (g) {
    g.test('Obtaining the name of the module to parse') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseFile.new(name: name, path: VALID_FILE)

      try assert_equal(request.name, name)
    }
  }

  t.group('std::compiler::module_parser::ParseFile.path') do (g) {
    g.test('Obtaining the path of the module to parse') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseFile.new(name: name, path: VALID_FILE)

      try assert_equal(request.path, VALID_FILE)
    }
  }

  t.group('std::compiler::module_parser::ParseFile.reply_to') do (g) {
    g.test('Obtaining the process to reply to') {
      let name = ModuleName.new(Array.new('foo'))
      let request = ParseFile.new(name: name, path: VALID_FILE)

      try assert_equal(request.reply_to.identifier, process.current.identifier)
    }
  }

  t.group('std::compiler::module_parser::ModuleParser.parse_source') do (g) {
    g.test('Parsing a module and its dependencies') {
      let config = config
      let diagnostics = Diagnostics.new
      let parser = ModuleParser.new(config: config, diagnostics: diagnostics)
      let name = ModuleName.new(Array.new('foo'))
      let modules =
        parser.parse_source(name: name, source: '10', path: 'test.inko')

      try assert_true(modules.1.length > 1)
      try assert_equal(modules.0.name, name)
      try assert_false(diagnostics.errors?)
    }

    g.test('Parsing a module that produces errors') {
      let config = config
      let diagnostics = Diagnostics.new
      let parser = ModuleParser.new(config: config, diagnostics: diagnostics)
      let name = ModuleName.new(Array.new('foo'))
      let modules =
        parser.parse_source(name: name, source: 'import 10', path: 'test.inko')

      try assert_true(modules.1.empty?)
      try assert_true(diagnostics.errors?)
    }
  }

  t.group('std::compiler::module_parser::ModuleParser.parse_file') do (g) {
    g.test('Parsing a module and its dependencies') {
      let config = config
      let file_path = fixtures.temporary_file_path
      let handle = try! WriteOnlyFile.new(file_path)

      process.defer { try file.remove(file_path) else Nil }
      process.defer { handle.close }

      try! handle.write_string('10')

      let diagnostics = Diagnostics.new
      let parser = ModuleParser.new(config: config, diagnostics: diagnostics)
      let name = ModuleName.new(Array.new('foo'))
      let modules = parser.parse_file(name: name, path: file_path)

      try assert_true(modules.1.length > 1)
      try assert_equal(modules.0.name, name)
      try assert_false(diagnostics.errors?)
    }

    g.test('Parsing a module that produces errors') {
      let config = config
      let file_path = fixtures.temporary_file_path
      let handle = try! WriteOnlyFile.new(file_path)

      process.defer { try file.remove(file_path) else Nil }
      process.defer { handle.close }

      try! handle.write_string('import 10')

      let diagnostics = Diagnostics.new
      let parser = ModuleParser.new(config: config, diagnostics: diagnostics)
      let name = ModuleName.new(Array.new('foo'))
      let modules = parser.parse_file(name: name, path: file_path)

      try assert_true(modules.1.empty?)
      try assert_true(diagnostics.errors?)
    }
  }
}
