import std::compiler::ast::body::Body
import std::compiler::ast::literals::IntegerLiteral
import std::compiler::parser::Parser
import std::compiler::source_location::SourceLocation
import std::test::*

def location -> SourceLocation {
  SourceLocation.new(file: 'test.inko', line_range: 1..2, column: 4)
}

def tests(t: Tests) {
  t.group('std::compiler::ast::body::Body.imports') do (g) {
    g.test('Extracting imports from a module body') {
      let parser = Parser.new(
        input: "import std::foo\nimport std::bar",
        file: 'test.inko',
        parse_comments: False
      )

      let body = try! parser.parse
      let imports = body.imports

      try assert_equal(imports.length, 2)
      try assert_equal(imports[0].module_name.to_string, 'std::foo')
      try assert_equal(imports[1].module_name.to_string, 'std::bar')
    }
  }

  t.group('std::compiler::ast::body::Body.location_of_last_expression') do (g) {
    g.test('Obtaining the location of the last expression when there are expressions') {
      let body_loc = location
      let expr_loc = location
      let expr = IntegerLiteral.new(value: '10', location: expr_loc)
      let body = Body.new(children: Array.new(expr), location: body_loc)

      try assert_true(body.location_of_last_expression.same_object?(expr_loc))
    }

    g.test('Obtaining the location of the last expression when there are no expressions') {
      let body_loc = location
      let body = Body.new(children: Array.new, location: body_loc)

      try assert_true(body.location_of_last_expression.same_object?(body_loc))
    }
  }
}
