import std::compiler::symbol_table::*
import std::compiler::types::(Builtins, Type, TypeScope)
import std::hash::Hash
import std::operators::Equal
import std::test::*

class DummyType {
  static def new -> Self {
    Self {}
  }
}

impl Equal for DummyType {}
impl Hash for DummyType {}

impl Type for DummyType {
  def type_name -> String {
    'DummyType'
  }

  def type_compatible?(
    compare_with: Type,
    builtins: Builtins,
    scope: TypeScope
  ) -> Boolean {
    False
  }
}

def tests(t: ref Tests) {
  t.group('std::compiler::symbol_table::Symbol.name') do (g) {
    g.test('Obtaining the name of a Symbol') {
      let symbol =
        Symbol.new(name: 'foo', id: 0, type: DummyType.new, mutable: False)

      try assert_equal(symbol.name, 'foo')
    }
  }

  t.group('std::compiler::symbol_table::Symbol.type') do (g) {
    g.test('Obtaining the type of a symbol') {
      let type = DummyType.new
      let symbol = Symbol.new(name: 'foo', id: 0, type: type, mutable: False)

      try assert_equal(symbol.type, type)
    }
  }

  t.group('std::compiler::symbol_table::Symbol.mutable?') do (g) {
    g.test('Checking if a Symbol is mutable') {
      let immutable =
        Symbol.new(name: 'foo', id: 0, type: DummyType.new, mutable: False)

      let mutable =
        Symbol.new(name: 'foo', id: 0, type: DummyType.new, mutable: True)

      try assert_false(immutable.mutable?)
      try assert_true(mutable.mutable?)
    }
  }

  t.group('std::compiler::symbol_table::Symbol.id') do (g) {
    g.test('Obtaining the ID of a symbol') {
      let symbol =
        Symbol.new(name: 'foo', id: 2, type: DummyType.new, mutable: False)

      try assert_equal(symbol.id, 2)
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.define') do (g) {
    g.test('Defining a new symbol') {
      let table = SymbolTable.new
      let type = DummyType.new
      let symbol = table.define(name: 'foo', type: type, mutable: True)

      try assert_equal(symbol.name, 'foo')
      try assert_equal(symbol.type, type)
      try assert_true(symbol.mutable?)
    }

    g.test('Redefining an existing symbol') {
      let table = SymbolTable.new
      let type1 = DummyType.new
      let type2 = DummyType.new
      let symbol1 = table.define(name: 'foo', type: type1, mutable: True)
      let symbol2 = table.define(name: 'foo', type: type2, mutable: False)

      try assert_equal(symbol1.type, type1)
      try assert_true(symbol1.mutable?)

      try assert_equal(symbol2.type, type2)
      try assert_false(symbol2.mutable?)

      try assert_equal(table.symbols.length, 1)
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.[]') do (g) {
    g.test('Looking up an existing Symbol by its name') {
      let table = SymbolTable.new
      let symbol = table.define(name: 'foo', type: DummyType.new, mutable: True)

      try assert_true(table['foo'].same_object?(symbol))
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.get') do (g) {
    g.test('Looking up a non-existing Symbol by its name') {
      let table = SymbolTable.new

      try assert_true(table.get('foo').none?)
    }

    g.test('Looking up an existing Symbol by its name') {
      let table = SymbolTable.new
      let symbol = table.define(name: 'foo', type: DummyType.new, mutable: True)
      let found = table.get('foo')

      try assert_true(found.some?)
      try assert_true(found.get.same_object?(symbol))
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.symbols') do (g) {
    g.test('Obtaining all the symbols defined in a table') {
      let table = SymbolTable.new

      try assert_true(table.symbols.empty?)

      let symbol = table.define(name: 'foo', type: DummyType.new, mutable: True)

      try assert_equal(table.symbols.length, 1)
      try assert_true(table.symbols[0].same_object?(symbol))
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.defines?') do (g) {
    g.test('Checking if a symbol is defined') {
      let table = SymbolTable.new

      table.define(name: 'foo', type: DummyType.new)

      try assert_true(table.defines?('foo'))
      try assert_false(table.defines?('bar'))
    }
  }

  t.group('std::compiler::symbol_table::SymbolTable.contains?') do (g) {
    g.test('Checking if a symbol table contains a symbol') {
      let table = SymbolTable.new
      let sym1 = table.define(name: 'foo', type: DummyType.new)
      let sym2 =
        Symbol.new(name: 'foo', id: 42, type: DummyType.new, mutable: False)

      try assert_true(table.contains?(sym1))
      try assert_false(table.contains?(sym2))
    }
  }
}
