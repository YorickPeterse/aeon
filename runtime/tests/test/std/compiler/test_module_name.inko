import std::compiler::module_name::ModuleName
import std::fs::dir
import std::fs::file::WriteOnlyFile
import std::hash::Hasher
import std::os
import std::process
import std::test::*
import test::fixtures

def tests(t: ref Tests) {
  t.group('std::compiler::module_name::ModuleName.components') do (g) {
    g.test('Obtaining the components of a module name') {
      let name = ModuleName.new(Array.new('std', 'foo'))

      try assert_equal(name.components, Array.new('std', 'foo'))
    }
  }

  t.group('std::compiler::module_name::ModuleName.relative_source_path') do (g) {
    g.test('Obtaining the source path of a module') {
      let name = ModuleName.new(Array.new('std', 'foo'))
      let expected =
        if os.windows? { 'std\\foo.inko' } else { 'std/foo.inko' }.into_path

      try assert_equal(name.relative_source_path, expected)
    }
  }

  t.group('std::compiler::module_name::ModuleName.absolute_source_path') do (g) {
    g.test('Obtaining the absolute source path of an existing module') {
      let name = ModuleName.new(Array.new('foo'))
      let directory = fixtures.temporary_file_path
      let source_path = directory.join('foo.inko')

      process.defer {
        try dir.remove(path: directory, recursive: True) else Nil
      }

      try! dir.create(path: directory)

      let handle = try! WriteOnlyFile.new(source_path.clone)

      process.defer {
        handle.close
      }

      try assert_equal(
        name.absolute_source_path(Array.new(directory)),
        Option.some(source_path)
      )
    }

    g.test('Obtaining the absolute paht of a non-existing module') {
      let name = ModuleName.new(Array.new('foo'))
      let directory = fixtures.temporary_file_path

      try assert_true(name.absolute_source_path(Array.new(directory)).none?)
    }
  }

  t.group('std::compiler::module_name::ModuleName.==') do (g) {
    g.test('Comparing two equal ModuleName objects') {
      let name1 = ModuleName.new(Array.new('std', 'foo'))
      let name2 = ModuleName.new(Array.new('std', 'foo'))

      try assert_equal(name1, name2)
    }

    g.test('Comparing two different ModuleName objects') {
      let name1 = ModuleName.new(Array.new('std', 'foo'))
      let name2 = ModuleName.new(Array.new('std', 'bar'))

      try assert_not_equal(name1, name2)
    }
  }

  t.group('std::compiler::module_name::ModuleName.hash') do (g) {
    g.test('Hashing a ModuleName') {
      let name = ModuleName.new(Array.new('std', 'foo'))
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      name.hash(ref hasher1)
      name.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Looking up a HashMap value using a ModuleName as the key') {
      let map = Map.new
      let name1 = ModuleName.new(Array.new('std', 'foo'))
      let name2 = ModuleName.new(Array.new('std', 'foo'))

      map[name1] = 10

      try assert_equal(map[name2], 10)
    }
  }

  t.group('std::compiler::module_name::ModuleName.to_string') do (g) {
    g.test('Converting an empty ModuleName to a String') {
      try assert_equal(ModuleName.new(Array.new).to_string, '')
    }

    g.test('Converting a ModuleName with a single component to a String') {
      try assert_equal(ModuleName.new(Array.new('std')).to_string, 'std')
    }

    g.test('Converting a non-empty ModuleName to a String') {
      try assert_equal(
        ModuleName.new(Array.new('std', 'foo')).to_string,
        'std::foo'
      )
    }
  }

  t.group('std::compiler::module_name::ModuleName.bootstrap?') do (g) {
    g.test('Checking if a module name is std::bootstrap') {
      try assert_true(ModuleName.new(Array.new('std', 'bootstrap')).bootstrap?)
      try assert_false(ModuleName.new(Array.new('std', 'foo')).bootstrap?)
    }
  }

  t.group('std::compiler::module_name::ModuleName.init?') do (g) {
    g.test('Checking if a module name is std::init') {
      try assert_true(ModuleName.new(Array.new('std', 'init')).init?)
      try assert_false(ModuleName.new(Array.new('std', 'foo')).init?)
    }
  }

  t.group('std::compiler::module_name::ModuleName.std?') do (g) {
    g.test('Checking if a module is in the standard library') {
      try assert_true(ModuleName.new(Array.new('std', 'init')).std?)
      try assert_false(ModuleName.new(Array.new('foo', 'foo')).std?)
    }
  }

  t.group('std::compiler::module_name::ModuleName.tail') do (g) {
    g.test('Obtaining the tail of a module name') {
      try assert_equal(ModuleName.new(Array.new('std', 'foo')).tail, 'foo')
      try assert_equal(ModuleName.new(Array.new('std')).tail, 'std')
    }
  }

  t.group('std::compiler::module_name::ModuleName.head') do (g) {
    g.test('Obtaining the head of a module name') {
      try assert_equal(ModuleName.new(Array.new('std', 'foo')).head, 'std')
    }
  }
}
