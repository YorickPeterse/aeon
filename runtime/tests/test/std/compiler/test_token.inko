import std::compiler::source_location::SourceLocation
import std::compiler::token::*
import std::test::*

def location -> SourceLocation {
  SourceLocation.new(file: 'test.inko', line_range: 1..2, column: 4)
}

def regular_token -> RegularToken {
  RegularToken.new(type: 'identifier', value: 'foo', location: location)
}

def keyword_token -> KeywordToken {
  KeywordToken.new(keyword: 'import', location: location)
}

def invalid_token -> InvalidToken {
  InvalidToken.new(value: 'foo', location: location)
}

def null_token -> NullToken {
  NullToken.new(location)
}

def tests(t: ref Tests) {
  t.group('std::compiler::token::Token.same_line?') do (g) {
    g.test('Checking if two tokens reside on the same line') {
      let token1 = regular_token
      let token2 = regular_token
      let token3 = RegularToken.new(
        type: 'paren_open',
        value: '(',
        location: SourceLocation.new(file: 'test.inko', line_range: 3..4, column: 4)
      )

      try assert_true(token1.same_line?(token2))
      try assert_false(token1.same_line?(token3))
    }
  }

  t.group('std::compiler::token::RegularToken.type') do (g) {
    g.test('Obtaining the type of a token') {
      try assert_equal(regular_token.type, 'identifier')
    }
  }

  t.group('std::compiler::token::RegularToken.value') do (g) {
    g.test('Obtaining the value of a token') {
      try assert_equal(regular_token.value, 'foo')
    }
  }

  t.group('std::compiler::token::RegularToken.source_location') do (g) {
    g.test('Obtaining the source location of a token') {
      let token = regular_token

      try assert_equal(token.location.line_range, 1..2)
      try assert_equal(token.location.column, 4)
      try assert_equal(token.location.file, 'test.inko'.into_path)
    }
  }

  t.group('std::compiler::token::RegularToken.keyword?') do (g) {
    g.test('Checking if a token is a keyword') {
      try assert_false(regular_token.keyword?)
    }
  }

  t.group('std::compiler::token::RegularToken.valid?') do (g) {
    g.test('Checking if a token is valid') {
      try assert_true(regular_token.valid?)
    }
  }

  t.group('std::compiler::token::RegularToken.null?') do (g) {
    g.test('Checking if a token is a null token') {
      try assert_false(regular_token.null?)
    }
  }

  t.group('std::compiler::token::KeywordToken.type') do (g) {
    g.test('Obtaining the type of a token') {
      try assert_equal(keyword_token.type, 'import')
    }
  }

  t.group('std::compiler::token::KeywordToken.value') do (g) {
    g.test('Obtaining the value of a token') {
      try assert_equal(keyword_token.value, 'import')
    }
  }

  t.group('std::compiler::token::KeywordToken.source_location') do (g) {
    g.test('Obtaining the source location of a token') {
      let token = keyword_token

      try assert_equal(token.location.line_range, 1..2)
      try assert_equal(token.location.column, 4)
      try assert_equal(token.location.file, 'test.inko'.into_path)
    }
  }

  t.group('std::compiler::token::KeywordToken.keyword?') do (g) {
    g.test('Checking if a token is a keyword') {
      try assert_true(keyword_token.keyword?)
    }
  }

  t.group('std::compiler::token::KeywordToken.valid?') do (g) {
    g.test('Checking if a token is valid') {
      try assert_true(keyword_token.valid?)
    }
  }

  t.group('std::compiler::token::KeywordToken.null?') do (g) {
    g.test('Checking if a token is a null token') {
      try assert_false(keyword_token.null?)
    }
  }

  t.group('std::compiler::token::InvalidToken.type') do (g) {
    g.test('Obtaining the type of a token') {
      try assert_equal(invalid_token.type, 'invalid')
    }
  }

  t.group('std::compiler::token::InvalidToken.value') do (g) {
    g.test('Obtaining the value of a token') {
      try assert_equal(invalid_token.value, 'foo')
    }
  }

  t.group('std::compiler::token::InvalidToken.source_location') do (g) {
    g.test('Obtaining the source location of a token') {
      let token = invalid_token

      try assert_equal(token.location.line_range, 1..2)
      try assert_equal(token.location.column, 4)
      try assert_equal(token.location.file, 'test.inko'.into_path)
    }
  }

  t.group('std::compiler::token::InvalidToken.keyword?') do (g) {
    g.test('Checking if a token is a keyword') {
      try assert_false(invalid_token.keyword?)
    }
  }

  t.group('std::compiler::token::InvalidToken.valid?') do (g) {
    g.test('Checking if a token is valid') {
      try assert_false(invalid_token.valid?)
    }
  }

  t.group('std::compiler::token::InvalidToken.null?') do (g) {
    g.test('Checking if a token is a null token') {
      try assert_false(invalid_token.null?)
    }
  }

  t.group('std::compiler::token::NullToken.type') do (g) {
    g.test('Obtaining the type of a token') {
      try assert_equal(null_token.type, 'null')
    }
  }

  t.group('std::compiler::token::NullToken.value') do (g) {
    g.test('Obtaining the value of a token') {
      try assert_equal(null_token.value, '')
    }
  }

  t.group('std::compiler::token::NullToken.source_location') do (g) {
    g.test('Obtaining the source location of a token') {
      let token = null_token

      try assert_equal(token.location.line_range, 1..2)
      try assert_equal(token.location.column, 4)
      try assert_equal(token.location.file, 'test.inko'.into_path)
    }
  }

  t.group('std::compiler::token::NullToken.keyword?') do (g) {
    g.test('Checking if a token is a keyword') {
      try assert_false(null_token.keyword?)
    }
  }

  t.group('std::compiler::token::NullToken.valid?') do (g) {
    g.test('Checking if a token is valid') {
      try assert_false(null_token.valid?)
    }
  }

  t.group('std::compiler::token::NullToken.null?') do (g) {
    g.test('Checking if a token is a null token') {
      try assert_true(null_token.null?)
    }
  }
}
