import std::compiler::ast::body::Body
import std::compiler::ast::imports::Import
import std::compiler::ast::literals::IntegerLiteral
import std::compiler::ast::node::Node
import std::compiler::ast::objects::ImplementTrait
import std::compiler::ast::send::Send
import std::compiler::desugar
import std::compiler::module_name::ModuleName
import std::compiler::parser::Parser
import std::compiler::types::(BOOTSTRAP_MODULE, OBJECT_TRAIT)
import std::test::*

def parse(input: String) -> Body {
  let parser =
    Parser.new(input: input, file: 'test.inko', parse_comments: False)

  try! parser.parse
}

def imports_in(body: Body) -> Array!(ModuleName) {
  body
    .imports
    .iter
    .map do (node) { node.module_name }
    .to_array
}

def module_name(*components: String) -> ModuleName {
  ModuleName.new(components)
}

def tests(t: ref Tests) {
  t.group('std::compiler::desugar.add_object_implementation') do (g) {
    g.test('Adding the implementation of the Object trait') {
      let body = parse('class A {}')
      let module = module_name('foo')

      desugar.add_object_implementation(name: module, body: body)

      try assert_equal(body.children.length, 2)

      let impl_node = body.children[1] as ImplementTrait

      try assert_equal(impl_node.class_name.name, 'A')
      try assert_equal(impl_node.trait_name.name, OBJECT_TRAIT)
      try assert_true(impl_node.body.children.empty?)
      try assert_same_object(impl_node.location, body.children[0].location)
    }

    g.test("The Object trait isn't implemented in std::bootstrap") {
      let body = parse('class A {}')

      desugar.add_object_implementation(name: BOOTSTRAP_MODULE, body: body)

      try assert_equal(body.children.length, 1)
    }
  }

  t.group('std::compiler::desugar.hoist_imports') do (g) {
    g.test('Hosting imports to the start of the module') {
      let body = parse("import foo\n10\nimport bar")

      desugar.hoist_imports(body)

      try assert_instance_of(body.children[0], Import)
      try assert_instance_of(body.children[1], Import)
      try assert_instance_of(body.children[2], IntegerLiteral)

      try assert_equal(
        (body.children[0] as Import).module_name,
        ModuleName.new(Array.new('foo'))
      )

      try assert_equal(
        (body.children[1] as Import).module_name,
        ModuleName.new(Array.new('bar'))
      )
    }

    g.test('Hoisting imports when there are no imports to hoist_imports') {
      let body = parse('10')

      desugar.hoist_imports(body)

      try assert_equal(body.children.length, 1)
      try assert_instance_of(body.children[0], IntegerLiteral)
    }
  }

  t.group('std::compiler::desugar.add_implicit_symbols') do (g) {
    g.test('Adding implicit symbols to an import without symbols') {
      let body = parse('import std')

      desugar.add_implicit_symbols(body)

      let imp = body.children[0] as Import

      try assert_equal(imp.symbols.length, 1)
      try assert_true(imp.symbols[0].import_self?)
    }

    g.test('Adding implicit symbols to an import with symbols') {
      let body = parse('import std::(foo)')

      desugar.add_implicit_symbols(body)

      let imp = body.children[0] as Import

      try assert_equal(imp.symbols.length, 1)
      try assert_equal(imp.symbols[0].name, 'foo')
    }
  }

  t.group('std::compiler::desugar.add_implicit_imports') do (g) {
    g.test('Inserting implicit imports when compiling a module without imports') {
      let body = parse('')

      desugar.add_implicit_imports(name: module_name('std', 'foo'), body: body)

      let imports = imports_in(body)

      try assert_equal(
        imports,
        Array.new(module_name('std', 'bootstrap'), module_name('std', 'init'))
      )
    }

    g.test('Inserting implicit imports when compiling a module with imports') {
      let body = parse('import foo')

      desugar.add_implicit_imports(name: module_name('std', 'foo'), body: body)

      let imports = imports_in(body)

      try assert_equal(
        imports,
        Array.new(
          module_name('std', 'bootstrap'),
          module_name('std', 'init'),
          module_name('foo')
        )
      )
    }

    g.test('Inserting implicit imports when compiling std::init') {
      let body = parse('')

      desugar
        .add_implicit_imports(name: module_name('std', 'init'), body: body)

      let imports = imports_in(body)

      try assert_equal(
        imports,
        Array.new(ModuleName.new(Array.new('std', 'bootstrap')))
      )
    }

    g.test('Inserting implicit imports when compiling std::bootstrap') {
      let body = parse('')

      desugar
        .add_implicit_imports(name: module_name('std', 'bootstrap'), body: body)

      try assert_true(body.children.empty?)
    }

    g.test('Inserting implicit imports into a non standard library module') {
      let body = parse('')

      desugar.add_implicit_imports(name: module_name('foo', 'bar'), body: body)

      let imports = body.imports

      try assert_equal(imports[0].module_name, module_name('std', 'bootstrap'))
      try assert_equal(imports[1].module_name, module_name('std', 'init'))

      try assert_equal(imports[2].module_name, module_name('std', 'option'))
      try assert_equal(imports[2].symbols[0].name, 'Option')

      try assert_equal(imports[3].module_name, module_name('std', 'map'))
      try assert_equal(imports[3].symbols[0].name, 'Map')

      try assert_equal(imports[4].module_name, module_name('std', 'range'))
      try assert_equal(imports[4].symbols[0].name, 'Range')

      try assert_equal(imports[5].module_name, module_name('std', 'loop'))
      try assert_equal(imports[5].symbols[0].name, 'loop')

      try assert_equal(imports[6].module_name, module_name('std', 'loop'))
      try assert_equal(imports[6].symbols[0].name, 'while')
    }
  }
}
