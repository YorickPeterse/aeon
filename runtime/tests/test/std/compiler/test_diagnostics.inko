import std::compiler::diagnostics::*
import std::compiler::source_location::SourceLocation
import std::test::*

def location -> SourceLocation {
  SourceLocation.new(file: 'test.inko', line_range: 1..2, column: 4)
}

def error -> Diagnostic {
  Diagnostic.new(level: ERROR, message: 'testing', location: location)
}

def tests(t: ref Tests) {
  t.group('std::compiler::diagnostics::Diagnostic.level') do (g) {
    g.test('Obtaining the level of a diagnostic') {
      try assert_equal(error.level, 'error')
    }
  }

  t.group('std::compiler::diagnostics::Diagnostic.level') do (g) {
    g.test('Obtaining the level of a diagnostic') {
      try assert_equal(error.level, 'error')
    }
  }

  t.group('std::compiler::diagnostics::Diagnostic.message') do (g) {
    g.test('Obtaining the message of a diagnostic') {
      try assert_equal(error.message, 'testing')
    }
  }

  t.group('std::compiler::diagnostics::Diagnostic.location') do (g) {
    g.test('Obtaining the source location of a diagnostic') {
      try assert_equal(error.location.column, 4)
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.any?') do (g) {
    g.test('Checking if there are any diagnostics') {
      let collection = Diagnostics.new

      try assert_false(collection.any?)

      collection.error(message: 'testing', location: location)

      try assert_true(collection.any?)
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.append') do (g) {
    g.test('Appending one Diagnostics to another Diagnostics') {
      let diag1 = Diagnostics.new
      let diag2 = Diagnostics.new

      diag1.warning(message: 'testing', location: location)
      diag2.error(message: 'testing', location: location)

      diag1.append(diag2)

      try assert_equal(diag1.length, 2)
      try assert_true(diag1.errors?)
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.length') do (g) {
    g.test('Obtaining the number of diagnostics') {
      let collection = Diagnostics.new

      try assert_equal(collection.length, 0)

      collection.error(message: 'testing', location: location)

      try assert_equal(collection.length, 1)
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.iter') do (g) {
    g.test('Iterating over the diagnostics') {
      let collection = Diagnostics.new

      collection.error(message: 'testing', location: location)

      let iter = collection.iter

      try assert_equal(iter.next.get.message, 'testing')
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.error') do (g) {
    g.test('Adding an error') {
      let collection = Diagnostics.new

      try assert_false(collection.errors?)

      collection.error(message: 'testing', location: location)

      let iter = collection.iter

      try assert_equal(iter.next.get.level, 'error')
      try assert_true(collection.errors?)
    }
  }

  t.group('std::compiler::diagnostics::Diagnostics.warning') do (g) {
    g.test('Adding an warning') {
      let collection = Diagnostics.new

      collection.warning(message: 'testing', location: location)

      let iter = collection.iter

      try assert_equal(iter.next.get.level, 'warning')
    }
  }
}
