import std::env
import std::os::(self, Command, NEWLINE)
import std::test::*

def tests(t: ref Tests) {
  t.group('std::os.platform') do (g) {
    g.test('Obtaining the name of the underlying platform') {
      let valid_platforms = Array.new(
        'android',
        'bitrig',
        'dragonfly',
        'freebsd',
        'ios',
        'linux',
        'macos',
        'netbsd',
        'openbsd',
        'unix',
        'unknown',
        'windows'
      )

      try assert_true(valid_platforms.contains?(os.platform))
    }
  }

  t.group('std::os.windows?') do (g) {
    g.test('Checking if the underlying platform is Windows') {
      try assert_equal(os.windows?, os.platform == 'windows')
    }
  }

  t.group('std::os.linux?') do (g) {
    g.test('Checking if the underlying platform is Linux') {
      try assert_equal(os.linux?, os.platform == 'linux')
    }
  }

  t.group('std::os.unix?') do (g) {
    g.test('Checking if the underlying platform is Unix') {
      try assert_equal(os.unix?, os.windows?.false?)
    }
  }

  t.group('std::os.mac?') do (g) {
    g.test('Checking if the underlying platform is Mac OS') {
      try assert_equal(os.mac?, os.platform == 'macos')
    }
  }

  t.group('std::os::NEWLINE') do (g) {
    g.test('Obtaining the newline separator for the underlying platform') {
      let expected = if os.windows? { "\r\n" } else { "\n" }

      try assert_equal(NEWLINE, expected)
    }
  }

  t.group('std::os::Command.program') do (g) {
    g.test('Getting the program') {
      try assert_equal(Command.new('ls').program, 'ls')
    }
  }

  t.group('std::os::Command.argument') do (g) {
    g.test('Adding a single argument') {
      let cmd = Command.new('ls').argument('foo').argument('bar')

      try assert_equal(cmd.current_arguments, Array.new('foo', 'bar'))
    }
  }

  t.group('std::os::Command.arguments') do (g) {
    g.test('Adding multiple arguments') {
      let cmd = Command.new('ls').arguments(Array.new('foo', 'bar'))

      try assert_equal(cmd.current_arguments, Array.new('foo', 'bar'))
    }
  }

  t.group('std::os::Command.variable') do (g) {
    g.test('Adding a single environment variable') {
      let cmd = Command.new('ls').variable(name: 'USER', value: 'alice')

      try assert_equal(cmd.current_variables['USER'], 'alice')
    }
  }

  t.group('std::os::Command.variables') do (g) {
    g.test('Adding multiple environment variables') {
      let vars = Map.new

      vars['USER'] = 'alice'
      vars['FOO'] = 'bar'

      let cmd = Command.new('ls').variables(vars)

      try assert_equal(cmd.current_variables['USER'], 'alice')
      try assert_equal(cmd.current_variables['FOO'], 'bar')
    }
  }

  # Testing STDIN, STDOUT and STDERR on Windows is a bit tricky due to its
  # limited support for commandline programs. As such we only run some basic
  # tests on Windows, and more in-depth tests on Unix platforms.
  if os.windows? {
    t.group('std::os::Command.spawn') do (g) {
      g.test('Spawning a command that ignores all input and output') {
        let cmd = Command
          .new(try! env.executable)
          .argument('--help')
          .ignore_stdin
          .ignore_stdout
          .ignore_stderr

        let child = try! cmd.spawn

        try! child.wait

        try assert_equal(try! child.stdout.read_string, '')
        try assert_equal(try! child.stderr.read_string, '')
      }

      g.test('Spawning a non-existing command') {
        let cmd = Command.new('foo').ignore_stdin.ignore_stdout.ignore_stderr

        try assert_throw { try cmd.spawn }
      }
    }
  }

  if os.unix? {
    t.group('std::os::Command.spawn') do (g) {
      g.test('Spawning a command that ignores all input and output') {
        let cmd = Command.new('echo').ignore_stdin.ignore_stdout.ignore_stderr
        let child = try! cmd.spawn
        let status = try! child.wait

        try assert_true(status.success?)
        try assert_equal(try! child.stdout.read_string, '')
        try assert_equal(try! child.stderr.read_string, '')
      }

      g.test('Spawning a command that pipes STDOUT') {
        let cmd = Command
          .new('echo')
          .argument('foo')
          .ignore_stdin
          .ignore_stderr
          .pipe_stdout

        let child = try! cmd.spawn
        let status = try! child.wait

        try assert_true(status.success?)
        try assert_equal(try! child.stdout.read_string, "foo\n")
      }

      g.test('Spawning a command that pipes STDERR') {
        let cmd = Command
          .new('ls')
          .argument('--wat')
          .ignore_stdin
          .ignore_stdout
          .pipe_stderr

        let child = try! cmd.spawn

        try! child.wait

        try assert_false(try! { child.stderr.read_string }.empty?)
      }

      g.test('Spawning a command that supports writing to STDIN') {
        let cmd = Command
          .new('cat')
          .argument('-')
          .pipe_stdout
          .pipe_stdin
          .ignore_stderr

        let child = try! cmd.spawn

        try! child.stdin.write_string('hello')
        try! child.wait

        try assert_equal(try! child.stdout.read_string, 'hello')
      }

      g.test('Spawning a non-existing command') {
        let cmd = Command.new('foo').ignore_stdin.ignore_stdout.ignore_stderr

        try assert_throw { try cmd.spawn }
      }
    }

    t.group('std::os::ChildProcess.wait') do (g) {
      g.test('Waiting for a process') {
        let cmd = Command.new('true').ignore_stdout.ignore_stderr
        let child = try! cmd.spawn
        let status = try! child.wait

        try assert_true(status.code.zero?)
        try assert_true(status.success?)
      }
    }

    t.group('std::os::ChildProcess.try_wait') do (g) {
      g.test('Waiting for a process') {
        let cmd = Command
          .new('cat')
          .argument('-')
          .ignore_stdout
          .ignore_stderr
          .pipe_stdin

        let child = try! cmd.spawn

        try assert_true(try! { child.try_wait }.none?)

        try! child.stdin.write_string('foo')

        # We can't use try_wait directly, as the process may not have terminated
        # when we do so.
        try! child.wait

        let status = try! child.try_wait

        try assert_true(status.some?)
        try assert_true(status.get.success?)
      }
    }
  }
}
