import std::float::(NAN, INFINITY, NEGATIVE_INFINITY)
import std::hash::Hasher
import std::test::*

def tests(t: ref Tests) {
  t.group('std::float::Float.+') do (g) {
    g.test('Adding two Floats together') {
      try assert_equal(1.0 + 2.0, 3.0)
    }

    g.test('Adding a Float and a NAN') {
      let float = 1.0 + NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Adding a NAN and a Float') {
      let float = NAN + 1.0

      try assert_true(float.not_a_number?)
    }

    g.test('Adding a Float and Infinity') {
      let float = 1.0 + INFINITY

      try assert_equal(float, INFINITY)
    }

    g.test('Adding Infinity and a Float') {
      let float = INFINITY + 1.0

      try assert_equal(float, INFINITY)
    }
  }

  t.group('std::float::Float./') do (g) {
    g.test('Dividing a Float by another Float') {
      try assert_equal(5.0 / 2.0, 2.5)
    }

    g.test('Dividing a Float by zero') {
      try assert_equal(1.0 / 0.0, INFINITY)
    }

    g.test('Dividing a Float by a NAN') {
      let float = 1.0 / NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Dividing a NAN by a Float') {
      let float = NAN / 2.0

      try assert_true(float.not_a_number?)
    }

    g.test('Dividing a NAN by a NAN') {
      let float = NAN / NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Dividing a NAN by Infinity') {
      let float = NAN / INFINITY

      try assert_true(float.not_a_number?)
    }

    g.test('Dividing a Float by Infinity') {
      try assert_equal(1.0 / INFINITY, 0.0)
    }

    g.test('Dividing Infinity by a Float') {
      try assert_equal(INFINITY / 2.0, INFINITY)
    }

    g.test('Dividing Infinity by a NAN') {
      let float = INFINITY / NAN

      try assert_true(float.not_a_number?)
    }
  }

  t.group('std::float::Float.*') do (g) {
    g.test('Multiplying a Float by another Float') {
      try assert_equal(5.0 * 2.0, 10.0)
    }

    g.test('Multiplying a Float by a NAN') {
      let float = 1.0 * NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Multiplying a NAN by a Float') {
      let float = NAN * 2.0

      try assert_true(float.not_a_number?)
    }

    g.test('Multiplying a NAN by a NAN') {
      let float = NAN * NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Multiplying a NAN by Infinity') {
      let float = NAN * INFINITY

      try assert_true(float.not_a_number?)
    }

    g.test('Multiplying a Float by Infinity') {
      try assert_equal(1.0 * INFINITY, INFINITY)
    }

    g.test('Multiplying Infinity by a Float') {
      try assert_equal(INFINITY * 2.0, INFINITY)
    }

    g.test('Multiplying Infinity by a NAN') {
      let float = INFINITY * NAN

      try assert_true(float.not_a_number?)
    }
  }

  t.group('std::float::Float.-') do (g) {
    g.test('Subtracting a Float by another Float') {
      try assert_equal(5.0 - 2.0, 3.0)
    }

    g.test('Subtracting a Float by a NAN') {
      let float = 1.0 - NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Subtracting a NAN by a Float') {
      let float = NAN - 2.0

      try assert_true(float.not_a_number?)
    }

    g.test('Subtracting a NAN by a NAN') {
      let float = NAN - NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Subtracting a NAN by Infinity') {
      let float = NAN - INFINITY

      try assert_true(float.not_a_number?)
    }

    g.test('Subtracting a Float by Infinity') {
      try assert_equal(1.0 - INFINITY, NEGATIVE_INFINITY)
    }

    g.test('Subtracting Infinity by a Float') {
      try assert_equal(INFINITY - 2.0, INFINITY)
    }

    g.test('Subtracting Infinity by a NAN') {
      let float = INFINITY - NAN

      try assert_true(float.not_a_number?)
    }
  }

  t.group('std::float::Float.%') do (g) {
    g.test('Returning the modulo of a Float and another Float') {
      try assert_equal(5.0 % 2.0, 1.0)
    }

    g.test('Returning the modulo of a Float and a NAN') {
      let float = 1.0 % NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Returning the modulo of a NAN and a Float') {
      let float = NAN % 2.0

      try assert_true(float.not_a_number?)
    }

    g.test('Returning the modulo of a NAN and another NAN') {
      let float = NAN % NAN

      try assert_true(float.not_a_number?)
    }

    g.test('Returning the modulo of a NAN and Infinity') {
      let float = NAN % INFINITY

      try assert_true(float.not_a_number?)
    }

    g.test('Returning the modulo of a Float and Infinity') {
      try assert_equal(1.0 % INFINITY, 1.0)
    }

    g.test('Returning the modulo of Infinity and a Float') {
      let float = INFINITY % 2.0

      try assert_true(float.not_a_number?)
    }

    g.test('Returning the modulo of Infinity and a NAN') {
      let float = INFINITY % NAN

      try assert_true(float.not_a_number?)
    }
  }

  t.group('std::float::Float.<') do (g) {
    g.test('Comparing two Floats') {
      try assert_true(1.0 < 2.0)
      try assert_false(2.0 < 1.0)
    }

    g.test('Comparing a Float and a NAN') {
      try assert_false(1.0 < NAN)
    }

    g.test('Comparing a NAN and a Float') {
      try assert_false(NAN < 1.0)
    }

    g.test('Comparing a NAN and another NAN') {
      try assert_false(NAN < NAN)
    }

    g.test('Comparing a Float and Infinity') {
      try assert_true(1.0 < INFINITY)
    }

    g.test('Comparing Infinity and a Float') {
      try assert_false(INFINITY < 1.0)
      try assert_true(NEGATIVE_INFINITY < 1.0)
    }

    g.test('Comparing a NAN and Infinity') {
      try assert_false(NAN < INFINITY)
    }

    g.test('Comparing Infinity and a NAN') {
      try assert_false(INFINITY < NAN)
    }
  }

  t.group('std::float::Float.>') do (g) {
    g.test('Comparing two Floats') {
      try assert_true(2.0 > 1.0)
      try assert_false(1.0 > 2.0)
    }

    g.test('Comparing a Float and a NAN') {
      try assert_false(1.0 > NAN)
    }

    g.test('Comparing a NAN and a Float') {
      try assert_false(NAN > 1.0)
    }

    g.test('Comparing a NAN and another NAN') {
      try assert_false(NAN > NAN)
    }

    g.test('Comparing a Float and Infinity') {
      try assert_false(1.0 > INFINITY)
    }

    g.test('Comparing Infinity and a Float') {
      try assert_true(INFINITY > 1.0)
      try assert_false(NEGATIVE_INFINITY > 1.0)
    }

    g.test('Comparing a NAN and Infinity') {
      try assert_false(NAN > INFINITY)
    }

    g.test('Comparing Infinity and a NAN') {
      try assert_false(INFINITY > NAN)
    }
  }

  t.group('std::float::Float.==') do (g) {
    g.test('Comparing two identical Floats') {
      try assert_equal(1.0, 1.0)
    }

    g.test('Comparing two almost identical Floats') {
      try assert_equal(0.15 + 0.3, 0.45)
    }

    g.test('Comparing a Float with a NAN') {
      try assert_not_equal(1.0, NAN)
    }

    g.test('Comparing a NAN with a Float') {
      try assert_not_equal(NAN, 1.0)
    }

    g.test('Comparing a NAN with another NAN') {
      try assert_not_equal(NAN, NAN)
    }

    g.test('Comparing a Float with Infinity') {
      try assert_not_equal(1.0, INFINITY)
    }

    g.test('Comparing INFINITY with Infinity') {
      try assert_equal(INFINITY, INFINITY)
    }

    g.test('Comparing a NAN with Infinity') {
      try assert_not_equal(NAN, INFINITY)
    }
  }

  t.group('std::float::Float.>=') do (g) {
    g.test('Comparing two Floats') {
      try assert_true(10.0 >= 10.0)
      try assert_true(10.0 >= 5.0)
      try assert_false(10.0 >= 15.0)
    }

    g.test('Comparing a Float with a NAN') {
      try assert_false(1.0 >= NAN)
    }

    g.test('Comparing a NAN with a NAN') {
      try assert_false(NAN >= NAN)
    }

    g.test('Comparing a Float with Infinity') {
      try assert_false(1.0 >= INFINITY)
    }

    g.test('Comparing Infinity with a Float') {
      try assert_true(INFINITY >= 1.0)
    }

    g.test('Comparing INFINITY with another Infinity') {
      try assert_true(INFINITY >= INFINITY)
    }
  }

  t.group('std::float::Float.<=') do (g) {
    g.test('Comparing two Floats') {
      try assert_true(10.0 <= 10.0)
      try assert_false(10.0 <= 5.0)
      try assert_true(10.0 <= 15.0)
    }

    g.test('Comparing a Float with a NAN') {
      try assert_false(1.0 <= NAN)
    }

    g.test('Comparing a NAN with a NAN') {
      try assert_false(NAN <= NAN)
    }

    g.test('Comparing a Float with Infinity') {
      try assert_true(1.0 <= INFINITY)
    }

    g.test('Comparing Infinity with a Float') {
      try assert_false(INFINITY <= 1.0)
    }

    g.test('Comparing Infinity with another Infinity') {
      try assert_true(INFINITY <= INFINITY)
    }
  }

  t.group('std::float::Float.negative?') do (g) {
    g.test('Using a positive Float') {
      try assert_false(1.0.negative?)
    }

    g.test('Using a negative Float') {
      try assert_true(-1.0.negative?)
    }

    g.test('Using a NAN') {
      try assert_false(NAN.negative?)
    }

    g.test('Using positive Infinity') {
      try assert_false(INFINITY.negative?)
    }

    g.test('Using negative Infinity') {
      try assert_true(NEGATIVE_INFINITY.negative?)
    }
  }

  t.group('std::float::Float.positive?') do (g) {
    g.test('Using a positive Float') {
      try assert_true(1.0.positive?)
    }

    g.test('Using a negative Float') {
      try assert_false(-1.0.positive?)
    }

    g.test('Using a NAN') {
      try assert_false(NAN.positive?)
    }

    g.test('Using positive Infinity') {
      try assert_true(INFINITY.positive?)
    }

    g.test('Using negative Infinity') {
      try assert_false(NEGATIVE_INFINITY.positive?)
    }
  }

  t.group('std::float::Float.zero?') do (g) {
    g.test('Using a positive Float') {
      try assert_false(1.0.zero?)
    }

    g.test('Using a negative Float') {
      try assert_false(-1.0.zero?)
    }

    g.test('Using positive zero') {
      try assert_true(0.0.zero?)
    }

    g.test('Using negative zero') {
      try assert_true(-0.0.zero?)
    }

    g.test('Using a NAN') {
      try assert_false(NAN.zero?)
    }

    g.test('Using positive Infinity') {
      try assert_false(INFINITY.zero?)
    }

    g.test('Using negative Infinity') {
      try assert_false(NEGATIVE_INFINITY.zero?)
    }
  }

  t.group('std::float::Float.absolute') do (g) {
    g.test('Using a positive Float') {
      try assert_equal(1.0.absolute, 1.0)
    }

    g.test('Using a negative Float') {
      try assert_equal(-1.0.absolute, 1.0)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.absolute.not_a_number?)
    }

    g.test('Using positive Infinity') {
      try assert_equal(INFINITY.absolute, INFINITY)
    }

    g.test('Using negative Infinity') {
      try assert_equal(NEGATIVE_INFINITY.absolute, INFINITY)
    }
  }

  t.group('std::float::Float.opposite') do (g) {
    g.test('Using a positive Float') {
      try assert_equal(1.0.opposite, -1.0)
    }

    g.test('Using a negative Float') {
      try assert_equal(-1.0.opposite, 1.0)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.opposite.not_a_number?)
    }

    g.test('Using positive Infinity') {
      try assert_equal(INFINITY.opposite, NEGATIVE_INFINITY)
    }

    g.test('Using negative Infinity') {
      try assert_equal(NEGATIVE_INFINITY.opposite, INFINITY)
    }
  }

  t.group('std::float::Float.not_a_number?') do (g) {
    g.test('Using a Float') {
      try assert_false(1.0.not_a_number?)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.not_a_number?)
    }

    g.test('Using Infinity') {
      try assert_false(INFINITY.not_a_number?)
    }

    g.test('Using negative Infinity') {
      try assert_false(NEGATIVE_INFINITY.not_a_number?)
    }
  }

  t.group('std::float::Float.infinite?') do (g) {
    g.test('Using a Float') {
      try assert_false(1.0.infinite?)
    }

    g.test('Using a NAN') {
      try assert_false(NAN.infinite?)
    }

    g.test('Using Infinity') {
      try assert_true(INFINITY.infinite?)
    }

    g.test('Using negative Infinity') {
      try assert_true(NEGATIVE_INFINITY.infinite?)
    }
  }

  t.group('std::float::Float.finite?') do (g) {
    g.test('Using a Float') {
      try assert_true(1.0.finite?)
    }

    g.test('Using a NAN') {
      try assert_false(NAN.finite?)
    }

    g.test('Using Infinity') {
      try assert_false(INFINITY.finite?)
    }

    g.test('Using negative Infinity') {
      try assert_false(NEGATIVE_INFINITY.finite?)
    }
  }

  t.group('std::float::Float.floor') do (g) {
    g.test('Using a Float with no decimals') {
      try assert_equal(1.0.floor, 1.0)
    }

    g.test('Using a Float with decimals') {
      try assert_equal(1.1234.floor, 1.0)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.floor.not_a_number?)
    }

    g.test('Using Infinity') {
      try assert_equal(INFINITY.floor, INFINITY)
    }

    g.test('Using negative Infinity') {
      try assert_equal(NEGATIVE_INFINITY.floor, NEGATIVE_INFINITY)
    }
  }

  t.group('std::float::Float.ceil') do (g) {
    g.test('Using a Float with no decimals') {
      try assert_equal(1.0.ceil, 1.0)
    }

    g.test('Using a Float with decimals') {
      try assert_equal(1.1234.ceil, 2.0)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.ceil.not_a_number?)
    }

    g.test('Using Infinity') {
      try assert_equal(INFINITY.ceil, INFINITY)
    }

    g.test('Using negative Infinity') {
      try assert_equal(NEGATIVE_INFINITY.ceil, NEGATIVE_INFINITY)
    }
  }

  t.group('std::float::Float.round') do (g) {
    g.test('Using a Float with no decimals') {
      try assert_equal(1.0.round(0), 1.0)
    }

    g.test('Using a Float with decimals') {
      try assert_equal(1.1234.round(0), 1.0)
    }

    g.test('Rounding a Float using a positive number of decimals') {
      try assert_equal(1.1234.round(1), 1.1)
      try assert_equal(1.1234.round(2), 1.12)
      try assert_equal(1.1234.round(3), 1.123)
      try assert_equal(1.1234.round(4), 1.1234)
    }

    g.test('Rounding a Float using a negative number of decimals') {
      try assert_equal(34567.89.round(-1), 34570.0)
      try assert_equal(34567.89.round(-2), 34600.0)
      try assert_equal(34567.89.round(-3), 35000.0)
      try assert_equal(34567.89.round(-4), 30000.0)
    }

    g.test('Rounding the maximum Float using a positive number of decimals') {
      let float = 1.7976931348623157e+308

      try assert_equal(float.round(2), float)
    }

    g.test('Rounding a Float using a number of decimals that is too great') {
      try assert_equal(1.1234.round(1 << 32), 1.1234)
    }

    g.test('Rounding a Float using a number of decimals that is too small') {
      try assert_equal(1.1234.round(-1 << 32), 1.1234)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.round(0).not_a_number?)
    }

    g.test('Using Infinity') {
      try assert_equal(INFINITY.round(0), INFINITY)
    }

    g.test('Using negative Infinity') {
      try assert_equal(NEGATIVE_INFINITY.round(0), NEGATIVE_INFINITY)
    }
  }

  t.group('std::float::Float.fractional') do (g) {
    g.test('Using a Float without any decimals') {
      try assert_equal(1.0.fractional, 0.0)
    }

    g.test('Using a Float with decimals') {
      try assert_equal(1.123.fractional, 0.123)
    }

    g.test('Using a NAN') {
      try assert_true(NAN.fractional.not_a_number?)
    }

    g.test('Using Infinity') {
      try assert_true(INFINITY.fractional.not_a_number?)
    }

    g.test('Using negative Infinity') {
      try assert_true(NEGATIVE_INFINITY.fractional.not_a_number?)
    }
  }

  t.group('std::float::Float.to_int') do (g) {
    g.test('Converting a Float to an Int') {
      try assert_equal(1.5.to_int, 1)
    }

    g.test('Converting a negative Float to an Int') {
      try assert_equal(-1.5.to_int, -1)
    }

    g.test('Converting a very large Float to an Int') {
      let float = (1 << 100).to_float

      try assert_equal(float.to_int, 1 << 100)
    }

    g.test('Converting NaN to an Int') {
      try assert_panic(
        '
        import std::float::NAN

        NAN.to_int
        '
      )
    }

    g.test('Converting Infinity to an Int') {
      try assert_panic(
        '
        import std::float::INFINITY

        INFINITY.to_int
        '
      )
    }

    g.test('Converting negative Infinity to an Int') {
      try assert_panic(
        '
        import std::float::NEGATIVE_INFINITY

        NEGATIVE_INFINITY.to_int
        '
      )
    }
  }

  t.group('std::float::Float.to_float') do (g) {
    g.test('Converting a Float to a Float') {
      try assert_equal(1.5.to_float, 1.5)
    }

    g.test('Converting a NAN to a Float') {
      try assert_true(NAN.to_float.not_a_number?)
    }

    g.test('Converting Infinity to a Float') {
      try assert_equal(INFINITY.to_float, INFINITY)
    }
  }

  t.group('std::float::Float.to_string') do (g) {
    g.test('Converting a Float to a String') {
      try assert_equal(1.5.to_string, '1.5')
      try assert_equal(1.1234.to_string, '1.1234')
    }

    g.test('Converting a NAN to a String') {
      try assert_equal(NAN.to_string, 'NaN')
    }

    g.test('Converting Infinity to a String') {
      try assert_equal(INFINITY.to_string, 'Infinity')
    }

    g.test('Converting negative Infinity to a String') {
      try assert_equal(NEGATIVE_INFINITY.to_string, '-Infinity')
    }
  }

  t.group('std::float::Float.hash') do (g) {
    g.test('Hashing a Float') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      1.5.hash(ref hasher1)
      1.5.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing a NaN') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      NAN.hash(ref hasher1)
      NAN.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing Infinity') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      INFINITY.hash(ref hasher1)
      INFINITY.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing negative Infinity') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      NEGATIVE_INFINITY.hash(ref hasher1)
      NEGATIVE_INFINITY.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }

  t.group('std::float::Float.to_bits') do (g) {
    g.test('Converting a Float to its bitwise representation') {
      try assert_equal(1.0.to_bits, 4607182418800017408)
    }

    g.test('Converting a NaN to its bitwise representation') {
      try assert_equal(NAN.to_bits, 18444492273895866368)
    }

    g.test('Converting Infinity to its bitwise representation') {
      try assert_equal(INFINITY.to_bits, 9218868437227405312)
    }

    g.test('Converting negative Infinity to its bitwise representation') {
      try assert_equal(NEGATIVE_INFINITY.to_bits, 18442240474082181120)
    }
  }

  t.group('std::float::Float.parse') do (g) {
    g.test('Parsing a Float') {
      try assert_equal(try! Float.parse('1.2'), 1.2)
    }

    g.test('Parsing a Float with leading whitespace') {
      try assert_throw { try Float.parse(' 1.2') }
    }

    g.test('Parsing a Float with trailing whitespace') {
      try assert_throw { try Float.parse('1.2 ') }
    }

    g.test('Parsing a Float with an exponentn') {
      try assert_equal(try! Float.parse('1.2e1'), 12.0)
      try assert_equal(try! Float.parse('1.2E1'), 12.0)
    }

    g.test('Parsing a Float with just a decimal point') {
      try assert_equal(try! Float.parse('.5'), 0.5)
    }

    g.test('Parsing a Float without a decimal digit') {
      try assert_equal(try! Float.parse('5.'), 5.0)
    }

    g.test('Parsing a negative Float') {
      try assert_equal(try! Float.parse('-1.2'), -1.2)
    }

    g.test('Parsing infinity') {
      try assert_equal(try! Float.parse('inf'), INFINITY)
      try assert_equal(try! Float.parse('Infinity'), INFINITY)
    }

    g.test('Parsing negative infinity') {
      try assert_equal(try! Float.parse('-inf'), NEGATIVE_INFINITY)
      try assert_equal(try! Float.parse('-Infinity'), NEGATIVE_INFINITY)
    }

    g.test('Parsing a NaN') {
      try assert_true(try! { Float.parse('NaN') }.not_a_number?)
    }
  }
}
