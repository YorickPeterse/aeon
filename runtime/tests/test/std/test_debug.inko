import std::debug::(self, StackFrame)
import std::mirror::ModuleMirror
import std::test::*

def tests(t: ref Tests) {
  t.group('std::debug::StackFrame.path') do (g) {
    g.test('Obtaining the file path of a StackFrame') {
      let frame = StackFrame.new(path: 'foo.inko', name: 'foo', line: 1)

      try assert_equal(frame.path.to_string, 'foo.inko')
    }
  }

  t.group('std::debug::StackFrame.name') do (g) {
    g.test('Obtaining the name of a StackFrame') {
      let frame = StackFrame.new(path: 'foo.inko', name: 'foo', line: 1)

      try assert_equal(frame.name, 'foo')
    }
  }

  t.group('std::debug::StackFrame.line') do (g) {
    g.test('Obtaining the line number of a StackFrame') {
      let frame = StackFrame.new(path: 'foo.inko', name: 'foo', line: 1)

      try assert_equal(frame.line, 1)
    }
  }

  t.group('std::debug.stacktrace') do (g) {
    g.test('Obtaining a stacktrace to the caller') {
      let trace = debug.stacktrace(skip: 1, limit: 0)
      let mirror = ModuleMirror.new(ThisModule)
      let last = trace[-1]

      try assert_true(trace.length > 0)
      try assert_equal(last.name, '<block>')
      try assert_equal(last.line, 32)
      try assert_equal(last.path, mirror.source_path)
    }

    g.test('Limiting the number of call frames in a stacktrace') {
      let trace = debug.stacktrace(skip: 1, limit: 1)

      try assert_equal(trace.length, 1)
    }

    g.test('Skipping a number of call frames in a stacktrace') {
      let trace = debug.stacktrace(skip: 2, limit: 0)
      let mirror = ModuleMirror.new(ThisModule)

      try assert_true(trace.length > 0)
      try assert_not_equal(trace[-1].path, mirror.source_path)
    }
  }
}
