import std::string_buffer::StringBuffer
import std::test::*

def tests(t: ref Tests) {
  t.group('std::string_buffer::StringBuffer.new') do (g) {
    g.test('Creating an empty StringBuffer') {
      try assert_true(StringBuffer.new.empty?)
    }

    g.test('Creating a StringBuffer with values') {
      try assert_equal(StringBuffer.new('foo').length, 1)
    }
  }

  t.group('std::string_buffer::StringBuffer.from_array') do (g) {
    g.test('Creating a StringBuffer from an empty Array') {
      try assert_true(StringBuffer.from_array(Array.new).empty?)
    }

    g.test('Creating a StringBuffer from an Array with values') {
      try assert_equal(StringBuffer.from_array(Array.new('foo')).length, 1)
    }
  }

  t.group('std::string_buffer::StringBuffer.push') do (g) {
    g.test('Pushing a String into a StringBuffer') {
      let buffer = StringBuffer.new

      buffer.push('x')

      try assert_equal(buffer.to_string, 'x')
    }
  }

  t.group('std::string_buffer::StringBuffer.to_string') do (g) {
    g.test('Converting a StringBuffer to a String') {
      let buffer = StringBuffer.new

      buffer.push('foo')
      buffer.push('bar')
      buffer.push('baz')

      try assert_equal(buffer.to_string, 'foobarbaz')
    }
  }

  t.group('std::string_buffer::StringBuffer.length') do (g) {
    g.test('Obtaining the length of an empty StringBuffer') {
      try assert_equal(StringBuffer.new.length, 0)
    }

    g.test('Obtaining the length of a non-empty StringBuffer') {
      try assert_equal(StringBuffer.new('foo').length, 1)
    }
  }
}
