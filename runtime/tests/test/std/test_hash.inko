import std::hash::Hasher
import std::test::*

class Dummy {
  static def new -> Self {
    Self {}
  }
}

def tests(t: ref Tests) {
  t.group('std::map::Hasher.write') do (g) {
    g.test('Hashing an Int') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      hasher1.write(10)
      hasher2.write(10)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing an Float') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      hasher1.write(10.0)
      hasher2.write(10.0)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing a String') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      hasher1.write('hello')
      hasher2.write('hello')

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing a Boolean') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      hasher1.write(True)
      hasher2.write(True)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }

    g.test('Hashing a regular object') {
      let dummy = Dummy.new
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)

      hasher1.write(dummy)
      hasher2.write(dummy)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }
}
