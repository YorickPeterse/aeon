import std::conversion::ToString
import std::debug
import std::float::(NAN, INFINITY, NEGATIVE_INFINITY)
import std::format::(Format, Formatter)
import std::format::DefaultFormatter
import std::mirror
import std::mirror::(
  ArrayMirror, BlockMirror, BooleanMirror, ByteArrayMirror, FloatMirror,
  IntegerMirror, MapMirror, Mirror, Mirrored, ModuleMirror, NilMirror,
  ObjectMirror, OptionMirror, PairMirror, SetMirror, StringMirror, TripleMirror
)
import std::operators::Equal
import std::pair::(Triple, Pair)
import std::set::Set
import std::test::*

let CURRENT_FILE = ModuleMirror.new(ThisModule).source_path

trait Trait1 {}
trait Trait2 {}

class Dummy {
  @name: String
  @age: Int

  static def new -> Self {
    Self { @name = 'Alice', @age = 28 }
  }

  def foo {}
}

impl Equal for Dummy {}
impl Trait1 for Dummy {}

class EmptyObject {
  static def new -> Self {
    Self {}
  }
}

class OneAttribute {
  @number: Int

  static def new -> Self {
    Self { @number = 10 }
  }
}

class TwoAttributes {
  @first: String
  @second: Int

  static def new -> Self {
    Self { @first = 'first', @second = 10 }
  }
}

class NestedObject {
  @child: OneAttribute

  static def new -> Self {
    Self { @child = OneAttribute.new }
  }
}

class Foo {
  static def new -> Self {
    Self {}
  }
}

class FooMirror {
  @subject: ref Foo

  static def new(subject: ref Foo) -> Self {
    Self { @subject = subject }
  }
}

impl Format for FooMirror {
  def format(formatter: ref Formatter) {
    formatter.push('Foo')
  }
}

impl Mirror for FooMirror {
  def subject -> ref Foo {
    @subject
  }
}

impl Mirrored for Foo {
  def mirror -> FooMirror {
    FooMirror.new(self)
  }
}

def format(mirror: Mirror) -> String {
  let fmt = DefaultFormatter.new

  mirror.format(fmt)
  fmt.to_string
}

def tests(t: ref Tests) {
  t.group('std::mirror::Mirror.subject') do (g) {
    g.test('Obtaining the subject of a mirror') {
      let obj = Dummy.new

      try assert_equal(ObjectMirror.new(obj).subject, obj)
    }
  }

  t.group('std::mirror::Mirror.subject_same_object?') do (g) {
    g.test('Checking if a subject is the same object as another object') {
      let dummy = Dummy.new
      let mirror = ObjectMirror.new(dummy)

      try assert_true(mirror.subject_same_object?(dummy))
    }
  }

  t.group('std::mirror::Mirror.instance_of') do (g) {
    g.test('Obtaining the object an object is an instance of') {
      let mirr1 = ObjectMirror.new(Dummy.new)
      let mirr2 = ObjectMirror.new(mirr1.instance_of)

      try assert_true(mirr2.subject_same_object?(Dummy))
    }
  }

  t.group('std::mirror::Mirror.get_attribute') do (g) {
    g.test('Obtaining the value of a non existing attribute') {
      let obj = Dummy.new

      try assert_equal(ObjectMirror.new(obj).get_attribute('bar') as Nil, Nil)
    }

    g.test('Obtaining the value of an existing attribute') {
      let obj = Dummy.new

      try assert_equal(ObjectMirror.new(obj).get_attribute('@name') as String, 'Alice')
    }
  }

  t.group('std::mirror::Mirror.attributes') do (g) {
    g.test('Obtaining the attribute names of an object') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)
      let names = mirror.attributes

      try assert_true(names.contains?('@name'))
      try assert_true(names.contains?('@age'))
    }
  }

  t.group('std::mirror::Mirror.instance_of?') do (g) {
    g.test('Checking if an object is an instance of another object') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      try assert_true(mirror.instance_of?(Dummy))
      try assert_false(mirror.instance_of?(String))
      try assert_false(mirror.instance_of?(Nil))
    }

    g.test('Checking if Nil is an instance of Nil') {
      let mirror = ObjectMirror.new(Nil)

      try assert_false(mirror.instance_of?(Nil))
    }
  }

  t.group('std::mirror::Mirror.implements_trait?') do (g) {
    g.test('Checking if an object implements a trait') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      try assert_true(mirror.implements_trait?(Trait1))
      try assert_false(mirror.implements_trait?(Trait2))
    }

    g.test('Checking if Nil implements a trait') {
      let mirror = ObjectMirror.new(Nil)

      try assert_true(mirror.implements_trait?(Object))
      try assert_false(mirror.implements_trait?(Trait1))
    }
  }

  t.group('std::mirror::Mirror.implemented_traits') do (g) {
    g.test('Obtaining the traits implemented by an object') {
      let traits = ObjectMirror.new(Dummy).implemented_traits

      try assert_false(traits.empty?)
    }

    g.test('Obtaining the traits implemented by an object instance') {
      let traits = ObjectMirror.new(Dummy.new).implemented_traits

      try assert_false(traits.empty?)
    }
  }

  t.group('std::mirror::Mirror.inspect') do (g) {
    g.test('Inspecting a mirrored object') {
      try assert_equal(ObjectMirror.new(EmptyObject.new).inspect, 'EmptyObject')
    }
  }

  t.group('std::mirror::ObjectMirror.name') do (g) {
    g.test('Obtaining the name of an object') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      try assert_equal(mirror.name, 'Dummy')
    }

    g.test('Obtaining the name of a built-in object') {
      try assert_equal(ObjectMirror.new(String).name, 'String')
    }
  }

  t.group('std::mirror::ObjectMirror.set_attribute') do (g) {
    g.test('Setting the value of a non existing attribute') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      mirror.set_attribute('foo', 10)

      try assert_equal(mirror.get_attribute('foo') as Int, 10)
    }

    g.test('Setting the value of an existing attribute') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      mirror.set_attribute('@name', 'Bob')

      try assert_equal(mirror.get_attribute('@name') as String, 'Bob')
    }
  }

  t.group('std::mirror::ObjectMirror.format') do (g) {
    g.test('Formatting an empty Object') {
      try assert_equal(format(ObjectMirror.new(EmptyObject.new)), 'EmptyObject')
    }

    g.test('Formatting an Object with one attribute') {
      let obj = OneAttribute.new

      try assert_equal(format(ObjectMirror.new(obj)), 'OneAttribute { @number = 10 }')
    }

    g.test('Formatting an Object with multiple attributes') {
      let obj = TwoAttributes.new
      let possible = Array.new(
        'TwoAttributes { @first = "first", @second = 10 }',
        'TwoAttributes { @second = 10, @first = "first" }'
      )

      # The order of attributes is not guaranteed, so we can't perform an equality
      # comparison as such a test would randomly fail.
      try assert_true(possible.contains?(format(ObjectMirror.new(obj))))
    }

    g.test('Formatting an Object containing another Object') {
      let obj = NestedObject.new

      try assert_equal(
        format(ObjectMirror.new(obj)),
        'NestedObject { @child = OneAttribute { @number = 10 } }'
      )
    }
  }

  t.group('std::mirror::Mirror.instance_attributes') do (g) {
    g.test('Obtaining the instances attribute names of an object') {
      let obj = Dummy.new
      let mirror = ObjectMirror.new(obj)

      mirror.set_attribute('foo', 'bar')

      let names = mirror.instance_attributes

      try assert_true(names.contains?('@name'))
      try assert_true(names.contains?('@age'))
      try assert_false(names.contains?('foo'))
    }
  }

  t.group('std::mirror::BlockMirror.name') do (g) {
    g.test('Obtaining the name of a closure') {
      let mirror = BlockMirror.new({})

      try assert_equal(mirror.name, '<block>')
    }

    g.test('Obtianing the name of a lambda') {
      let mirror = BlockMirror.new(fn {})

      try assert_equal(mirror.name, '<lambda>')
    }

    g.test('Obtaining the name of a method') {
      let mirror = ObjectMirror.new(Dummy)
      let foo = mirror.get_attribute('foo') as Block

      try assert_equal(BlockMirror.new(foo).name, 'foo')
    }
  }

  t.group('std::mirror::BlockMirror.path') do (g) {
    g.test('Obtaining the path of a block') {
      let mirror = BlockMirror.new({})

      try assert_equal(mirror.path, CURRENT_FILE)
    }
  }

  t.group('std::mirror::BlockMirror.line') do (g) {
    g.test('Obtaining the line number of a block') {
      let mirror = BlockMirror.new({})
      let line = debug.stacktrace(skip: 1, limit: 1)[0].line - 1

      try assert_equal(mirror.line, line)
    }
  }

  t.group('std::mirror::BlockMirror.argument_names') do (g) {
    g.test('Obtaining the argument names of a block') {
      let mirror = BlockMirror.new(do (foo: Object, bar: Object) {})

      try assert_equal(mirror.argument_names, Array.new('foo', 'bar'))
    }
  }

  t.group('std::mirror::ModuleMirror.name') do (g) {
    g.test('Obtaining the name of a module') {
      let mirror = ModuleMirror.new(ThisModule)

      try assert_equal(mirror.name, 'test::std::test_mirror')
    }
  }

  t.group('std::mirror::ModuleMirror.source_path') do (g) {
    g.test('Obtaining the file path of a module') {
      let mirror = ModuleMirror.new(ThisModule)

      try assert_equal(mirror.source_path, CURRENT_FILE)
      try assert_true(mirror.source_path.file?)
    }
  }

  t.group('std::mirror::ArrayMirror.format') do (g) {
    g.test('Formatting an empty Array') {
      try assert_equal(format(ArrayMirror.new(Array.new)), 'Array')
    }

    g.test('Formatting an Array with values') {
      try assert_equal(format(ArrayMirror.new(Array.new(10))), 'Array { 10 }')
      try assert_equal(format(ArrayMirror.new(Array.new(10, 20))), 'Array { 10, 20 }')
    }
  }

  t.group('std::mirror::ByteArrayMirror.format') do (g) {
    g.test('Formatting a ByteArray') {
      let bytes = ByteArray.new(10, 20, 30)

      try assert_equal(format(ByteArrayMirror.new(bytes)), 'ByteArray { 3 bytes }')
    }
  }

  t.group('std::mirror::MapMirror.format') do (g) {
    g.test('Formatting an empty Map') {
      let map: Map!(String, String) = Map.new

      try assert_equal(format(MapMirror.new(map)), 'Map')
    }

    g.test('Formatting a Map with values') {
      let map = Map.new

      map['foo'] = 10
      map['bar'] = 20

      let output = format(MapMirror.new(map))
      let valid = output == 'Map { "foo": 10, "bar": 20 }'
        or output == 'Map { "bar": 20, "foo": 10 }'

      try assert_true(valid)
    }
  }

  t.group('std::mirror::SetMirror.format') do (g) {
    g.test('Formatting an empty Set') {
      let set: Set!(String) = Set.new

      try assert_equal(format(SetMirror.new(set)), 'Set')
    }

    g.test('Formatting a Set with a single value') {
      let set = Set.new

      set.insert(1)

      try assert_equal(format(SetMirror.new(set)), 'Set { 1 }')
    }

    g.test('Formatting a Set with multiple values') {
      let set = Set.new

      set.insert(1)
      set.insert(2)

      let output = format(SetMirror.new(set))
      let valid = output == 'Set { 1, 2 }' or output == 'Set { 2, 1 }'

      try assert_true(valid)
    }
  }

  t.group('std::mirror::PairMirror.format') do (g) {
    g.test('Formatting a Pair') {
      let pair = Pair.new(first: 10, second: 20)

      try assert_equal(format(PairMirror.new(pair)), 'Pair { 10, 20 }')
    }
  }

  t.group('std::mirror::TripleMirror.format') do (g) {
    g.test('Formatting a Triple') {
      let triple = Triple.new(first: 10, second: 20, third: 30)

      try assert_equal(format(TripleMirror.new(triple)), 'Triple { 10, 20, 30 }')
    }
  }

  t.group('std::mirror::IntegerMirror.format') do (g) {
    g.test('Formatting an Int') {
      try assert_equal(format(IntegerMirror.new(10)), '10')
      try assert_equal(format(IntegerMirror.new(-10)), '-10')
    }
  }

  t.group('std::mirror::FloatMirror.format') do (g) {
    g.test('Formatting a Float') {
      try assert_equal(format(FloatMirror.new(1.5)), '1.5')
      try assert_equal(format(FloatMirror.new(1.1234)), '1.1234')
    }

    g.test('Formatting a NAN') {
      try assert_equal(format(FloatMirror.new(NAN)), 'NaN')
    }

    g.test('Formatting Infinity') {
      try assert_equal(format(FloatMirror.new(INFINITY)), 'Infinity')
    }

    g.test('Formatting negative Infinity') {
      try assert_equal(format(FloatMirror.new(NEGATIVE_INFINITY)), '-Infinity')
    }
  }

  t.group('std::mirror::StringMirror.format') do (g) {
    g.test('Formatting an empty String') {
      try assert_equal(format(StringMirror.new('')), '""')
    }

    g.test('Formatting a String with characters') {
      try assert_equal(format(StringMirror.new('foo')), '"foo"')
    }
  }

  t.group('std::mirror::BlockMirror.format') do (g) {
    g.test('Formatting a Block') {
      let block = { 10 }

      try assert_equal(format(BlockMirror.new(block)), 'Block')
    }
  }

  t.group('std::mirror::BooleanMirror.format') do (g) {
    g.test('Formatting True') {
      try assert_equal(format(BooleanMirror.new(True)), 'True')
    }

    g.test('Formatting False') {
      try assert_equal(format(BooleanMirror.new(False)), 'False')
    }
  }

  t.group('std::mirror::NilMirror.format') do (g) {
    g.test('Formatting Nil') {
      try assert_equal(format(NilMirror.new(Nil)), 'Nil')
    }
  }

  t.group('std::mirror::OptionMirror.format') do (g) {
    g.test('Formatting a Some') {
      try assert_equal(format(OptionMirror.new(Option.some(10))), 'Some(10)')
    }

    g.test('Formatting a None') {
      try assert_equal(format(OptionMirror.new(Option.none)), 'None')
    }
  }

  t.group('std::mirror.reflect') do (g) {
    g.test('Obtaining a default mirror') {
      let mirror1 = mirror.reflect(Dummy.new)
      let mirror2 = mirror.reflect(Nil)

      try assert_true(ObjectMirror.new(mirror1).instance_of?(ObjectMirror))
      try assert_true(ObjectMirror.new(mirror2).instance_of?(NilMirror))
    }

    g.test('Obtaining a custom mirror') {
      let foo = Foo.new
      let mirror = mirror.reflect(foo)

      try assert_true(ObjectMirror.new(mirror).instance_of?(FooMirror))
    }
  }
}
