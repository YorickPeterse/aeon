import std::env
import std::os::Command
import std::process
import std::test::*

def temporary_environment_variable!(R)(block: do (String) -> R) -> R {
  let name = 'INKO_ENV_' + process.current.identifier.to_string

  process.defer {
    env.remove(name)
  }

  block.call(name)
}

def tests(t: ref Tests) {
  t.group('std::env.[]') do (g) {
    g.test('Obtaining the value of an existing environment variable') {
      temporary_environment_variable do (name) {
        env[name] = 'foo'

        try assert_equal(env[name], 'foo')
      }
    }

    g.test('Obtaining the value of a non-existing environment variable') {
      try assert_panic(
        'import std::env

        env["KITTENS"]'
      )
    }
  }

  t.group('std::env.get') do (g) {
    g.test('Obtaining the value of an existing environment variable') {
      temporary_environment_variable do (name) {
        env[name] = 'foo'

        try assert_equal(env.get(name), Option.some('foo'))
      }
    }

    g.test('Obtaining the value of a non-existing environment variable') {
      temporary_environment_variable do (name) {
        try assert_true(env.get(name).none?)
      }
    }
  }

  t.group('std::env.[]=') do (g) {
    g.test('Setting the value of an environment variable') {
      temporary_environment_variable do (name) {
        env[name] = 'foo'

        try assert_equal(env[name], 'foo')

        env[name] = 'bar'

        try assert_equal(env[name], 'bar')
      }
    }
  }

  t.group('std::env.remove') do (g) {
    g.test('Removing an existing environment variable') {
      temporary_environment_variable do (name) {
        env[name] = 'foo'

        env.remove(name)

        try assert_true(env.get(name).none?)
      }
    }

    g.test('Removing a non-existing environment variable') {
      temporary_environment_variable do (name) {
        env.remove(name)

        try assert_true(env.get(name).none?)
      }
    }
  }

  t.group('std::env.variables') do (g) {
    g.test('Obtaining all environment variables and their values') {
      temporary_environment_variable do (name) {
        env[name] = 'foo'

        let vars = env.variables

        try assert_false(vars.empty?)
        try assert_equal(vars[name], 'foo')
      }
    }
  }

  t.group('std::env.home_directory') do (g) {
    g.test('Obtaining the home directory of the current user') {
      let home = try env.home_directory.get else return

      try assert_greater(home.to_string.length, 0)
    }
  }

  t.group('std::env.temporary_directory') do (g) {
    g.test('Obtaining the temporary directory') {
      let temp_dir = env.temporary_directory

      try assert_true(temp_dir.exists?)
      try assert_greater(temp_dir.to_string.length, 0)
    }
  }

  t.group('std::env.working_directory') do (g) {
    g.test('Obtaining the current working directory') {
      let path = try env.working_directory else ''.to_path

      try assert_greater(path.to_string.length, 0)
    }
  }

  t.group('std::env.working_directory=') do (g) {
    g.test('Changing the current working directory') {
      let path = try env.working_directory else '.'.to_path
      let new_path = try env.working_directory = path else ''.to_path

      try assert_equal(new_path, path)
    }

    g.test('Changing the working directory to an invalid directory') {
      let path =
        try env.working_directory = 'does-not-exist' else 'not-set'.to_path

      try assert_equal(path, 'not-set'.to_path)
    }
  }

  t.group('std::env.arguments') do (g) {
    g.test('Obtaining the commandline arguments') {
      let program = '
        import std::env
        import std::stdio::stdout

        for arg in env.arguments { stdout.print(arg) }
        '

      let exe = try! env.executable
      let cmd = Command
        .new(exe)
        .argument('run')
        .argument('-e')
        .argument(program)
        .argument('foo')
        .argument('bar')
        .ignore_stdin
        .ignore_stderr
        .pipe_stdout

      let child = try! cmd.spawn
      let status = try! child.wait
      let out = try! child.stdout.read_string

      try assert_true(status.success?)
      try assert_equal(out, "foo\nbar\n")
    }

    g.test('Every call results in a new Array being returned') {
      let args1 = env.arguments
      let args2 = env.arguments

      try assert_false(args1.same_object?(args2))
    }
  }

  t.group('std::env.executable') do (g) {
    g.test('Getting the path to the current executable') {
      try assert_true(try! { env.executable }.file?)
    }
  }
}
