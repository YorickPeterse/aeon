import std::test::*

def tests(t: ref Tests) {
  t.group('std::option::Option.truthy?') do (g) {
    g.test('Using a Some') {
      try assert_true(Option.some(10).truthy?)
    }

    g.test('Using a None') {
      try assert_false(Option.none.truthy?)
    }
  }

  t.group('std::option::Option.else') do (g) {
    g.test('Using a Some') {
      let num = Option.some(10).else { Option.some(20) }

      try assert_equal(num, Option.some(10))
    }

    g.test('Using a None') {
      let num = Option.none.else { Option.some(20) }

      try assert_equal(num, Option.some(20))
    }
  }

  t.group('std::option::Option.get') do (g) {
    g.test('Using a Some') {
      try assert_equal(try! Option.some(10).get, 10)
    }

    g.test('Using a None') {
      try assert_throw { try Option.none.get }
    }
  }

  t.group('std::option::Option.map') do (g) {
    g.test('Using a Some') {
      try assert_equal(try! Option.some(10).map(do (_) { 20 }).get, 20)
    }

    g.test('Using a None') {
      try assert_true(Option.none.map(do (_) { 20 }).none?)
    }
  }

  t.group('std::option::Option.then') do (g) {
    g.test('Using a Some') {
      let option = Option.some(10).then do (_) { Option.some(20) }

      try assert_equal(try! option.get, 20)
    }

    g.test('Using a None') {
      let option = Option.none.then do (_) { Option.some(20) }

      try assert_true(option.none?)
    }
  }

  t.group('std::option::Option.some?') do (g) {
    g.test('Using a Some') {
      try assert_true(Option.some(10).some?)
    }

    g.test('Using a None') {
      try assert_false(Option.none.some?)
    }
  }

  t.group('std::option::Option.none?') do (g) {
    g.test('Using a Some') {
      try assert_false(Option.some(10).none?)
    }

    g.test('Using a None') {
      try assert_false(Option.none.some?)
    }
  }

  t.group('std::option::Option.==') do (g) {
    g.test('Comparing a Some') {
      try assert_equal(Option.some(10), Option.some(10))
      try assert_not_equal(Option.some(10), Option.some(20))
      try assert_not_equal(Option.some(10), Option.none)
    }

    g.test('Comparing a None') {
      try assert_equal(Option.none, Option.none)
      try assert_not_equal(Option.none, Option.some(10))
    }
  }
}
