import std::test::*
import std::test::test::ProgressFormatter

class Dummy {}

def tests(t: ref Tests) {
  t.group('std::test::Tests.concurrency') do (g) {
    g.test('Getting the number of concurrent tests to run') {
      let t = Tests.new

      t.concurrency = 4

      try assert_equal(t.concurrency, 4)
    }
  }

  t.group('std::test::Tests.formatter') do (g) {
    g.test('Getting the test formatter to use') {
      let t = Tests.new

      try assert_instance_of(t.formatter, ProgressFormatter)
    }
  }

  t.group('std::test::Tests.exit_on_failure') do (g) {
    g.test('Getting the setting that determines if the runner should exit upon failure') {
      let t = Tests.new

      try assert_true(t.exit_on_failure?)

      t.exit_on_failure = False

      try assert_false(t.exit_on_failure?)
    }
  }

  t.group('std::test.assert_equal') do (g) {
    g.test('Using two equal values') {
      try assert_no_throw { try assert_equal(10, 10) }
    }

    g.test('Using two different values') {
      try assert_throw { try assert_equal(10, 20) }
    }
  }

  t.group('std::test.assert_not_equal') do (g) {
    g.test('Using two equal values') {
      try assert_throw { try assert_not_equal(10, 10) }
    }

    g.test('Using two different values') {
      try assert_no_throw { try assert_not_equal(10, 20) }
    }
  }

  t.group('std::test.assert_same_object') do (g) {
    g.test('Using two identical objects') {
      let dummy = Dummy {}

      try assert_no_throw { try assert_same_object(dummy, dummy) }
    }

    g.test('Using two different objects') {
      let a = Dummy {}
      let b = Dummy {}

      try assert_throw { try assert_same_object(a, b) }
    }
  }

  t.group('std::test.assert_greater') do (g) {
    g.test('Using two equal values') {
      try assert_throw { try assert_greater(10, 10) }
    }

    g.test('Using two different values') {
      try assert_no_throw { try assert_greater(20, 10) }
    }
  }

  t.group('std::test.assert_true') do (g) {
    g.test('Using a value that is truthy') {
      try assert_no_throw { try assert_true(True) }
    }

    g.test('Using a value that is falsy') {
      try assert_throw { try assert_true(False) }
    }
  }

  t.group('std::test.assert_false') do (g) {
    g.test('Using a value that is truthy') {
      try assert_throw { try assert_false(True) }
    }

    g.test('Using a value that is falsy') {
      try assert_no_throw { try assert_false(False) }
    }
  }

  t.group('std::test.assert_panic') do (g) {
    g.test('Using code that panics') {
      try assert_no_throw { try assert_panic('10 / 0') }
    }

    g.test("Using code that doesn't panic") {
      try assert_throw { try assert_panic('10 / 10') }
    }
  }
}
