import std::hash::Hasher
import std::pair::*
import std::test::*

def tests(t: ref Tests) {
  t.group('std::pair::Pair.0') do (g) {
    g.test('Obtaining the first value of a Pair') {
      try assert_equal(Pair.new(10, 20).0, 10)
    }
  }

  t.group('std::pair::Pair.1') do (g) {
    g.test('Obtaining the second value of a Pair') {
      try assert_equal(Pair.new(10, 20).1, 20)
    }
  }

  t.group('std::pair::Pair.==') do (g) {
    g.test('Comparing two Pair objects for equality') {
      try assert_not_equal(Pair.new(1, 2), Pair.new(2, 3))
      try assert_equal(Pair.new(1, 1), Pair.new(1, 1))
    }
  }

  t.group('std::pair::Pair.hash') do (g) {
    g.test('Hashing a Pair') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)
      let pair = Pair.new(1, 2)

      pair.hash(ref hasher1)
      pair.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }

  t.group('std::pair::Triple.0') do (g) {
    g.test('Obtaining the first value of a Triple') {
      try assert_equal(Triple.new(10, 20, 30).0, 10)
    }
  }

  t.group('std::pair::Triple.1') do (g) {
    g.test('Obtaining the second value of a Triple') {
      try assert_equal(Triple.new(10, 20, 30).1, 20)
    }
  }

  t.group('std::pair::Triple.2') do (g) {
    g.test('Obtaining the third value of a Triple') {
      try assert_equal(Triple.new(10, 20, 30).2, 30)
    }
  }

  t.group('std::pair::Triple.==') do (g) {
    g.test('Comparing two Triple objects for equality') {
      try assert_not_equal(Triple.new(1, 2, 3), Triple.new(2, 3, 4))
      try assert_equal(Triple.new(1, 1, 1), Triple.new(1, 1, 1))
    }
  }

  t.group('std::pair::Triple.hash') do (g) {
    g.test('Hashing a Triple') {
      let hasher1 = Hasher.new(1, 2)
      let hasher2 = Hasher.new(1, 2)
      let triple = Triple.new(1, 2, 3)

      triple.hash(ref hasher1)
      triple.hash(ref hasher2)

      try assert_equal(hasher1.to_hash, hasher2.to_hash)
    }
  }
}
