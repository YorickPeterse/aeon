import std::mirror::ObjectMirror
import std::process
import std::random
import std::test::*

def tests(t: ref Tests) {
  t.group('std::random.integer') do (g) {
    g.test('Generating a random Int') {
      let int = random.integer
      let int_mirror = ObjectMirror.new(int)

      # There isn't much we can test, other than making sure the value is indeed
      # an Int.
      try assert_true(int_mirror.instance_of?(Int))
    }
  }

  t.group('std::random.incremental_integer') do (g) {
    g.test('Generating a random incremental Int') {
      # We pin the code below so that the process isn't moved between threads
      # before the assertion. A proces being moved could result in it producing
      # the same value twice.
      process.pinned {
        let one = random.incremental_integer
        let two = random.incremental_integer

        try assert_equal(two - one, 1)
      }
    }
  }

  t.group('std::random.float') do (g) {
    g.test('Generating a random Float') {
      let float = random.float
      let float_mirror = ObjectMirror.new(float)

      # There isn't much we can test, other than making sure the value is indeed
      # a Float.
      try assert_true(float_mirror.instance_of?(Float))
    }
  }

  t.group('std::random.integer_between') do (g) {
    g.test('Generating an Int in a range') {
      let min = 0
      let max = 10
      let val = random.integer_between(min: min, max: max)

      try assert_true(val >= min and val <= max)
    }

    g.test('Generating an Int in a really big range') {
      let min = 1_000_000_000_000_000_000_000
      let max = 5_000_000_000_000_000_000_000
      let val = random.integer_between(min: min, max: max)

      try assert_true(val >= min and val <= max)
    }

    g.test('Generating a negative Int') {
      let min = -10
      let max = 0
      let val = random.integer_between(min: min, max: max)

      try assert_true(val >= min and val <= max)
    }

    g.test('Using a minimum value greater than the maximum value') {
      try assert_panic(
        'import std::random

        random.integer_between(min: 10, max: 10)'
      )
    }

    g.test('Using a minimum and maximum value that are equal') {
      try assert_panic(
        'import std::random

        random.integer_between(min: 0, max: 0)'
      )
    }
  }

  t.group('std::random.float_between') do (g) {
    g.test('Generating a Float in a range') {
      let min = 0.0
      let max = 10.0
      let val = random.float_between(min: min, max: max)

      try assert_true(val >= min and val <= max)
    }

    g.test('Generating a negative Float') {
      let min = -10.0
      let max = 0.0
      let val = random.float_between(min: min, max: max)

      try assert_true(val >= min and val <= max)
    }

    g.test('Using a minimum value greater than the maximum value') {
      try assert_panic(
        'import std::random

        random.float_between(min: 10.0, max: 0.0)'
      )
    }

    g.test('Using a minimum and maximum value that are equal') {
      try assert_panic(
        'import std::random

        random.float_between(min: 0.0, max: 0.0)'
      )
    }
  }

  t.group('std::random.bytes') do (g) {
    g.test('Generating a ByteArray containing random bytes') {
      let bytes = random.bytes(size: 4)

      try assert_equal(bytes.length, 4)
    }
  }
}
