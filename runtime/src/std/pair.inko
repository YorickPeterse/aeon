# Types for binary and ternary tuples.
#
# This module only offers types for binary and ternary tuples. If you need a
# combination of more values (e.g. a 4-arity tuple), it's best to define your
# own type instead.
import std::hash::(Hash, Hasher)
import std::operators::Equal

# A pair of two values.
class Pair!(A, B) {
  # The first value of this `Pair`.
  @0: A

  # The second value of this `Pair`.
  @1: B

  static def new(first: A, second: B) -> Self {
    Self { @0 = first, @1 = second }
  }

  # Returns the first value of this `Pair`.
  #
  # # Examples
  #
  # Obtaining the first value of a `Pair`:
  #
  #     import std::pair::Pair
  #
  #     let pair = Pair.new(10, 'foo')
  #
  #     pair.0 # => 10
  def 0 -> A {
    @0
  }

  # Returns the second value of this `Pair`.
  #
  # # Examples
  #
  # Obtaining the second value of a `Pair`:
  #
  #     import std::pair::Pair
  #
  #     let pair = Pair.new(10, 'foo')
  #
  #     pair.1 # => 'foo'
  def 1 -> B {
    @1
  }
}

impl Equal for Pair {
  def ==(other: Self) -> Boolean when A: Equal, B: Equal {
    @0 == other.0 and @1 == other.1
  }
}

impl Hash for Pair {
  def hash(hasher: ref Hasher) when A: Hash, B: Hash {
    @0.hash(hasher)
    @1.hash(hasher)
  }
}

# A pair of three values.
class Triple!(A, B, C) {
  # The first value of this `Pair`.
  @0: A

  # The second value of this `Pair`.
  @1: B

  # The third value of this `Pair`.
  @2: C

  static def new(first: A, second: B, third: C) -> Self {
    Self { @0 = first, @1 = second, @2 = third }
  }

  # Returns the first value of this `Triple`.
  #
  # # Examples
  #
  # Obtaining the first value of a `Triple`:
  #
  #     import std::pair::Triple
  #
  #     let triple = Triple.new(10, 'foo', 20)
  #
  #     triple.0 # => 10
  def 0 -> A {
    @0
  }

  # Returns the second value of this `Triple`.
  #
  # # Examples
  #
  # Obtaining the second value of a `Triple`:
  #
  #     import std::pair::Triple
  #
  #     let triple = Triple.new(10, 'foo', 20)
  #
  #     triple.1 # => 'foo'
  def 1 -> B {
    @1
  }

  # Returns the third value of this `Triple`.
  #
  # # Examples
  #
  # Obtaining the second value of a `Triple`:
  #
  #     import std::pair::Triple
  #
  #     let triple = Triple.new(10, 'foo', 20)
  #
  #     triple.2 # => 20
  def 2 -> C {
    @2
  }
}

impl Equal for Triple {
  def ==(other: Self) -> Boolean when A: Equal, B: Equal, C: Equal {
    @0 == other.0 and @1 == other.1 and @2 == other.2
  }
}

impl Hash for Triple {
  def hash(hasher: ref Hasher) when A: Hash, B: Hash, C: Hash {
    @0.hash(hasher)
    @1.hash(hasher)
    @2.hash(hasher)
  }
}
