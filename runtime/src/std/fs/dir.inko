# Types and methods for manipulating directories on a filesystem.
import std::fs::path::Path
import std::io::Error
import std::process::(blocking)
import std::conversion::ToString

extern def directory_create(path: ref String) !! Int
extern def directory_create_recursive(path: ref String) !! Int
extern def directory_remove(path: ref String) !! Int
extern def directory_remove_recursive(path: ref String) !! Int
extern def directory_list(path: ref String) !! Int -> Array!(String)

# Creates a new empty directory at the given path.
#
# # Errors
#
# This method may throw if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to create the directory.
# 2. The directory already exists.
#
# # Examples
#
# Creating a directory:
#
#     import std::fs::dir
#
#     try! dir.create('/tmp/test')
def create(path: ref ToString) !! Error {
  let str = path.to_string

  try blocking {
    try directory_create(str) else (e) throw Error.new(e)
  }
}

# Creates a new empty directory at the given path, while also creating any
# intermediate directories.
#
# # Errors
#
# This method may throw if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to create the directory.
#
# # Examples
#
# Creating a directory:
#
#     import std::fs::dir
#
#     try! dir.create_all('/tmp/foo/bar/test')
def create_all(path: ref ToString) !! Error {
  let str = path.to_string

  try blocking {
    try directory_create_recursive(str) else (e) throw Error.new(e)
  }
}

# Removes the directory at the given path.
#
# # Errors
#
# This method may throw if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to remove the directory.
# 2. The directory is not empty.
# 3. The directory does not exist.
#
# # Examples
#
# Removing a directory:
#
#     import std::fs::dir
#
#     try! dir.create('/tmp/test')
#     try! dir.remove('/tmp/test')
def remove(path: ref ToString) !! Error {
  let str = path.to_string

  try blocking {
    try directory_remove(str) else (e) throw Error.new(e)
  }
}

# Removes the directory and its contents at the given path.
#
# # Errors
#
# This method may throw if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to remove the directory.
# 2. The directory does not exist.
#
# # Examples
#
# Removing a directory:
#
#     import std::fs::dir
#
#     try! dir.create_all(path: '/tmp/foo/bar')
#     try! dir.remove_all(path: '/tmp/foo')
def remove_all(path: ref ToString) !! Error {
  let str = path.to_string

  try blocking {
    try directory_remove_recursive(str) else (e) throw Error.new(e)
  }
}

# Returns an `Array` containing the paths to the contents of the directory.
#
# # Errors
#
# This method may throw if any of the following conditions are met:
#
# 1. The user lacks the necessary permissions to read the contents of the
#    directory.
# 2. The path does not point to a valid directory.
#
# # Examples
#
# Listing the contents of a directory:
#
#     import std::fs::dir
#
#     let paths = try! dir.list('.')
#
#     paths[0].to_string # => 'README.md'
def list(path: ref ToString) !! Error -> Array!(Path) {
  let paths = try blocking {
    try directory_list(path.to_string) else (e) throw Error.new(e)
  }

  paths.into_iter.map do (path) { Path.new(path) }.to_array
}
