# Internal constants and methods used by std::time.
import std::process::(panic)

# The number to divide a value in nanoseconds by to convert it to seconds.
let NANOSEC_TO_SEC = 1_000_000_000.0

# The number to divide a value in milliseconds by to convert it to seconds.
let MILLISEC_TO_SEC = 1000.0

# The number to divide a value in microseconds by to convert it to seconds.
let MICROSEC_TO_SEC = 1_000_000.0

# The number of seconds per minute, excluding any leap seconds.
let SECS_PER_MIN = 60

# The number of seconds per hour, excluding any leap seconds.
let SECS_PER_HOUR = SECS_PER_MIN * SECS_PER_MIN

# The number of seconds per day, excluding leap seconds.
let SECS_PER_DAY = SECS_PER_HOUR * 24

let DAYS_PER_WEEK = 7

# The number of days in a regular year.
let DAYS_PER_NORMAL_YEAR = 365

# The number of days in a 400 year cycle.
let DAYS_PER_400Y = (DAYS_PER_NORMAL_YEAR * 400) + 97

# The number of days in a 100 year cycle.
let DAYS_PER_100Y = (DAYS_PER_NORMAL_YEAR * 100) + 24

# The number of days in a four year cycle.
let DAYS_PER_4Y = (DAYS_PER_NORMAL_YEAR * 4) + 1

let MONTHS_PER_YEAR = 12

# The epoch of our internal calendar, starting at March 1st 2000. The year 2000
# is a multiple of 400 (the leap year cycle). Using an epoch starting in this
# year makes our calculations a bit easier.
let EPOCH = 946_684_800 + (SECS_PER_DAY * (31 + 29))

# The year of our epoch.
let EPOCH_YEAR = 2000

# The year of the Unix epoch.
let UNIX_EPOCH_YEAR = 1970

# Returns the number of days since January 1st.
#
# The `month` argument starts at `0`, not `1`.
def days_since_january(month: Int, leap: Boolean) -> Int {
  let leap_days = if leap { 1 } else { 0 }

  match month {
    0 -> { 0 }
    1 -> { 31 }
    2 -> { 59 + leap_days }
    3 -> { 90 + leap_days }
    4 -> { 120 + leap_days }
    5 -> { 151 + leap_days }
    6 -> { 181 + leap_days }
    7 -> { 212 + leap_days }
    8 -> { 243 + leap_days }
    9 -> { 273 + leap_days }
    10 -> { 304 + leap_days }
    11 -> { 334 + leap_days }
    else -> { panic(`{month} isn't a valid month`) }
  }
}

# Returns the number of days in every month of our internal calendar.
#
# The first entry is for March, not January.
def days_in_month(month: Int) -> Int {
  match month {
    0 -> { 31 }
    1 -> { 30 }
    2 -> { 31 }
    3 -> { 30 }
    4 -> { 31 }
    5 -> { 31 }
    6 -> { 30 }
    7 -> { 31 }
    8 -> { 30 }
    9 -> { 31 }
    10 -> { 31 }
    11 -> { 29 }
    else -> { panic(`{month} isn't a valid month`) }
  }
}
