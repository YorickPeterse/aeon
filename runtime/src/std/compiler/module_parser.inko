# Types for parsing a module's source code along with all its dependencies.
import std::byte_array::ToByteArray
import std::compiler::ast::body::Body
import std::compiler::ast::imports::Import
import std::compiler::config::Config
import std::compiler::desugar
import std::compiler::diagnostics::Diagnostics
import std::compiler::module_name::ModuleName
import std::compiler::parser::Parser
import std::compiler::source_location::SourceLocation
import std::fs::file::ReadOnlyFile
import std::fs::path::(IntoPath, Path)
import std::pair::Pair
import std::process::(self, Process)
import std::set::Set

# A module that has been parsed into an AST.
class ParsedModule {
  # The name of the module that was parsed.
  @name: ModuleName

  # The AST produced by parsing the module.
  @ast: Body

  static def new(name: ModuleName, ast: Body) -> Self {
    Self { @name = name, @ast = ast }
  }

  def name -> ModuleName {
    @name
  }

  def ast -> Body {
    @ast
  }

  def location -> SourceLocation {
    @ast.location
  }
}

# A request to parse and desugar source code.
trait ParseRequest {
  # Reads the source code to parse into a `ByteArray`.
  def read_source(diagnostics: Diagnostics) -> ByteArray

  # The name of the module to parse.
  def name -> ModuleName

  # The path to the source code of the module.
  def path -> Path

  # The process to send the parse results to.
  def reply_to -> Process

  # Parses and desugars the AST and sends the results back to a process.
  def parse {
    let diagnostics = Diagnostics.new
    let source = read_source(diagnostics)

    let ast = try {
      Parser.new(input: source, file: path, parse_comments: False).parse
    } else (err) {
      diagnostics.failed_to_parse(message: err.to_string, location: err.location)

      Body.new(
        children: Array.new,
        location: SourceLocation.new(file: path, line_range: 1..1, column: 1)
      )
    }

    if not diagnostics.errors? {
      desugar.hoist_imports(ast)
      desugar.add_implicit_imports(name: name, body: ast)
      desugar.add_implicit_symbols(ast)
      desugar.add_object_implementation(name: name, body: ast)
    }

    let module = ParsedModule.new(name: name, ast: ast)
    let result = Pair.new(module, diagnostics)

    reply_to.send(result)
  }

  def schedule {
    process.spawn { (process.receive as ParseRequest).parse }.send(self)
  }
}

# A request to parse a pre-defined chunk of source code.
class ParseSource {
  # The name of the module to parse.
  @name: ModuleName

  # The source code to parse.
  @source: ByteArray

  # The (fake) path of the source code to parse.
  #
  # This path may be used when producing diagnostics.
  @path: Path

  # The process to send the parse results to.
  @reply_to: Process

  static def new(name: ModuleName, source: ToByteArray, path: IntoPath) -> Self {
    Self {
      @name = name,
      @source = source.to_byte_array,
      @path = path.into_path,
      @reply_to = process.current
    }
  }
}

impl ParseRequest for ParseSource {
  def read_source(diagnostics: Diagnostics) -> ByteArray {
    @source
  }

  def name -> ModuleName {
    @name
  }

  def path -> Path {
    @path
  }

  def reply_to -> Process {
    @reply_to
  }
}

# A request to parse a file.
class ParseFile {
  # The name of the module to parse.
  @name: ModuleName

  # The path of the source code to parse.
  @path: Path

  # The process to send the parse results to.
  @reply_to: Process

  static def new(name: ModuleName, path: IntoPath) -> Self {
    Self { @name = name, @path = path.into_path, @reply_to = process.current }
  }
}

impl ParseRequest for ParseFile {
  def read_source(diagnostics: Diagnostics) -> ByteArray {
    let bytes = ByteArray.new

    try {
      ReadOnlyFile.new(@path).read_bytes(bytes)
    } else (err) {
      diagnostics.failed_to_read_source(message: err.message, path: @path)

      return bytes
    }

    bytes
  }

  def name -> ModuleName {
    @name
  }

  def path -> Path {
    @path
  }

  def reply_to -> Process {
    @reply_to
  }
}

# A type for parsing a module to run along with all its (recursive)
# dependencies.
class ModuleParser {
  # A collection of the diagnostics produced by the parser processes.
  @diagnostics: Diagnostics

  # Configuration used for finding modules on disk.
  @config: Config

  static def new(config: Config, diagnostics: Diagnostics) -> Self {
    Self { @config = config, @diagnostics = diagnostics }
  }

  # Parses a module of which the source code is directly provided.
  def parse_source(
    name: ModuleName,
    source: ToByteArray,
    path: IntoPath
  ) -> Pair!(ParsedModule, Array!(ParsedModule)) {
    parse_recursively(ParseSource.new(name: name, source: source, path: path))
  }

  # Parses a module stored somewhere on disk.
  def parse_file(
    name: ModuleName,
    path: IntoPath
  ) -> Pair!(ParsedModule, Array!(ParsedModule)) {
    parse_recursively(ParseFile.new(name: name, path: path))
  }

  # Parses a module starting with the provided request, then recursively parses
  # all dependencies.
  #
  # The returned `Pair` contains two values:
  #
  # 1. The parsed input module.
  # 2. All direct and indirect dependencies of the parsed module.
  def parse_recursively(
    initial: ParseRequest
  ) -> Pair!(ParsedModule, Array!(ParsedModule)) {
    let mut pending = 1
    let parsed = Set.new
    let modules = Array.new

    initial.schedule
    parsed.insert(initial.name)

    while pending.positive? {
      let result = process.receive as Pair!(ParsedModule, Diagnostics)
      let module = result.0

      @diagnostics.append(result.1)
      modules.push(module)
      pending -= 1

      # When errors are produced we still want to wait for any pending results,
      # otherwise these messages may conflict with messages we may expect later
      # on.
      if not @diagnostics.errors? {
        for node in module.ast.imports {
          let name = node.module_name

          if parsed.insert(name)
            and parse_dependency(name: name, location: node.location)
          {
            pending += 1
          }
        }
      }
    }

    let parsed_first = modules.remove_at(index: 0)

    Pair.new(parsed_first, modules)
  }

  # Schedules a single dependency for parsing.
  #
  # The return value is `True` if the dependency is scheduled.
  def parse_dependency(name: ModuleName, location: SourceLocation) -> Boolean {
    if @diagnostics.errors? { return False }

    let path =
      try name.absolute_source_path(@config.source_directories).get else {
        @diagnostics.module_not_found(name: name.to_string, location: location)
        return False
      }

    ParseFile.new(name: name, path: path).schedule
    True
  }
}
