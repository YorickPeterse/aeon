# Methods for desugaring an AST.
import std::compiler::ast::body::Body
import std::compiler::ast::imports::(Import, ImportAlias, ImportSymbol)
import std::compiler::ast::node::Node
import std::compiler::ast::objects::(DefineClass, ImplementTrait)
import std::compiler::ast::send::Send
import std::compiler::ast::variables::(Constant, Identifier)
import std::compiler::module_name::(
  STD_BOOTSTRAP, STD_INIT, STD_NAMESPACE, ModuleName
)
import std::compiler::prelude::(prelude)
import std::compiler::source_location::SourceLocation
import std::compiler::types::OBJECT_TRAIT
import std::pair::Pair

# Adds implicit implementations of the `Object` trait for any object
# definitions.
def add_object_implementation(name: ModuleName, body: Body) {
  if name.bootstrap? { return }

  let impls = Array.new

  for node in body.children {
    match let matched = node {
      as DefineClass -> {
        let loc = matched.location
        let obj_impl = ImplementTrait.new(
          trait_name: Constant.new(name: OBJECT_TRAIT, location: loc),
          class_name: Constant.new(name: matched.name, location: loc),
          type_parameter_bounds: Array.new,
          body: Body.new(children: Array.new, location: loc),
          location: loc
        )

        impls.push(obj_impl)
      }
      else -> {}
    }
  }

  body.children.append(impls)
}

# Hoists imports to the start of the body node.
#
# While `import` expressions can only appear at the top-level of a module, they
# can follow non-import code. For example, the following is valid Inko code:
#
#     import std::stdio::stdout
#
#     stdout.print('foo')
#
#     import std::stdio::stderr
#
# This compiler pass hoists all imports to the start of a module, retaining the
# order in which the `import` expressions appeared in the module. This means the
# above example would be turned into the following:
#
#     import std::stdio::stdout
#     import std::stdio::stderr
#
#     stdout.print('foo')
#
# Hosting imports is done so we can process (e.g. type check) dependencies
# first.
def hoist_imports(body: Body) {
  let pair = body.children.iter.partition do (node) {
    match node {
      as Import -> { True }
      else -> { False }
    }
  }

  pair.0.append(pair.1)

  body.children = pair.0
}

# Inserts implicit imports in the AST node, if needed.
def add_implicit_imports(name: ModuleName, body: Body) {
  let nodes = Array.new
  let location = body.location

  import_bootstrap(name: name, nodes: nodes, location: location)
  import_init(name: name, nodes: nodes, location: location)
  import_prelude(name: name, nodes: nodes, location: location)

  if nodes.empty? { return }
  nodes.append(body.children)

  body.children = nodes
}

# Adds implicit `self` symbols to import.
#
# This pass desugars this:
#
#     import std::stdio::stdout
#
# Into this:
#
#     import std::stdio::stdout::(self)
def add_implicit_symbols(body: Body) {
  for node in body.imports {
    if node.symbols.empty? {
      let mod = node.path[-1]

      node.symbols.push(ImportSymbol.new(name: 'self', location: mod.location))
    }
  }
}

def import_bootstrap(
  name: ModuleName,
  nodes: Array!(Import),
  location: SourceLocation
) {
  if name.bootstrap? { return }
  nodes.push(import_all(module: STD_BOOTSTRAP, location: location))
}

def import_init(
  name: ModuleName,
  nodes: Array!(Import),
  location: SourceLocation
) {
  if name.bootstrap? or name.init? { return }

  let node = Import.new(
    path: import_path_for_module(module: STD_INIT, location: location),
    symbols: Array.new,
    import_all: False,
    location: location
  )

  nodes.push(node)
}

def import_prelude(
  name: ModuleName,
  nodes: Array!(Import),
  location: SourceLocation
) {
  if name.std? { return }

  for pair in prelude {
    let mod_name = ModuleName.new(Array.new(STD_NAMESPACE, pair.0))
    let imp = Import.new(
      path: import_path_for_module(module: mod_name, location: location),
      symbols: Array.new(
        ImportSymbol.new(name: pair.1, location: location)
      ),
      import_all: False,
      location: location
    )

    nodes.push(imp)
  }
}

def import_path_for_module(
  module: ModuleName,
  location: SourceLocation
) -> Array!(Identifier) {
  module
    .components
    .iter
    .map do (name) { Identifier.new(name: name, location: location) }
    .to_array
}

def import_all(module: ModuleName, location: SourceLocation) -> Import {
  Import.new(
    path: import_path_for_module(module: module, location: location),
    symbols: Array.new,
    import_all: True,
    location: location
  )
}
