# Types for Inko source modules.
import std::compiler::config::SOURCE_EXTENSION
import std::compiler::source_location::SourceLocation
import std::conversion::ToString
import std::fs::path::(Path, SEPARATOR)
import std::hash::(Hash, Hasher)
import std::operators::Equal
import std::option::Option

# The name of a module.
class ModuleName {
  # The components of the module name.
  #
  # For example, the module name `std::foo` would translate to
  # `Array.new('std', 'foo')`.
  @components: Array!(String)

  static def new(components: Array!(String)) -> Self {
    Self { @components = components }
  }

  # The components that make up the name of a module
  def components -> ref Array!(String) {
    @components
  }

  # Returns the relative path to the module's source code.
  def relative_source_path -> Path {
    Path.new(@components.iter.join(SEPARATOR) + SOURCE_EXTENSION)
  }

  # Returns the absolute source path to this module.
  def absolute_source_path(directories: Array!(Path)) -> ?Path {
    let rel_path = relative_source_path

    for directory in directories {
      let source_path = directory.join(rel_path)

      if source_path.file? { return Option.some(source_path) }
    }

    Option.none
  }

  def bootstrap? -> Boolean {
    self == STD_BOOTSTRAP
  }

  def init? -> Boolean {
    self == STD_INIT
  }

  def std? -> Boolean {
    head == STD_NAMESPACE
  }

  def head -> String {
    @components[0].clone
  }

  def tail -> String {
    @components[-1].clone
  }
}

impl ToString for ModuleName {
  def to_string -> String {
    @components.iter.join('::')
  }
}

impl Equal for ModuleName {
  def ==(other: Self) -> Boolean {
    @components == other.components
  }
}

impl Hash for ModuleName {
  def hash(hasher: ref Hasher) {
    @components.hash(hasher)
  }
}

# The namespace for the standard library.
let STD_NAMESPACE = 'std'

# The name of the bootstrap module.
let STD_BOOTSTRAP = ModuleName.new(Array.new(STD_NAMESPACE, 'bootstrap'))

# The name of the init module.
let STD_INIT = ModuleName.new(Array.new(STD_NAMESPACE, 'init'))
