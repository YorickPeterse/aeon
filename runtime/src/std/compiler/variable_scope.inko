# Types for looking up local variables.
import std::compiler::symbol_table::*
import std::compiler::types::Type
import std::option::Option

# A scope to use for looking up local variables.
class VariableScope {
  # The symbol table that contains all local variables defined in this scope.
  @symbols: SymbolTable!(Type)

  # The parent scope we can capture variables from, if any.
  @parent: ?VariableScope

  static def new(parent: ?VariableScope = Option.none) -> Self {
    Self { @symbols = SymbolTable.new, @parent = parent }
  }

  def symbols -> SymbolTable!(Type) {
    @symbols
  }

  def parent -> ?VariableScope {
    @parent
  }

  def parent=(value: VariableScope) {
    @parent = Option.some(value)
  }

  def with_parent(scope: Self) -> Self {
    self.parent = scope
    self
  }

  def lookup(name: String) -> ?Symbol!(Type) {
    @symbols.get(name)
  }

  def lookup_with_parents(name: String) -> ?Symbol!(Type) {
    let mut scope = Option.some(self)

    while scope.some? {
      let symbol = scope.get.lookup(name)

      if symbol { return symbol }

      scope = scope.get.parent
    }

    Option.none
  }
}
