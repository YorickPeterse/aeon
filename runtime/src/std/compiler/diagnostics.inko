# Diagnostics produced by the compiler, such as warnings and errors.
import std::compiler::module_name::ModuleName
import std::compiler::source_location::SourceLocation
import std::conversion::ToString
import std::fs::path::Path
import std::length::Length

# The level identifier to use for errors.
let ERROR = 'error'

# The level identifier to use for warnings.
let WARNING = 'warning'

# A single warning or error produced by the compiler.
class Diagnostic {
  # The level of the diagnostic.
  @level: String

  # The message of the diagnostic.
  #
  # Messages are unique to the diagnostics. For looking up more details about a
  # diagnostic, one should use the identifier.
  @message: String

  # The source location that triggered the creation of this diagnostic.
  @location: SourceLocation

  static def new(
    level: String,
    message: String,
    location: SourceLocation
  ) -> Self {
    Self { @level = level, @message = message, @location = location }
  }

  # Returns the level of this diagnostic.
  def level -> ref String {
    @level
  }

  # Returns the message of this diagnostic.
  def message -> ref String {
    @message
  }

  # Returns the location this diagnostic was triggered on.
  def location -> ref SourceLocation {
    @location
  }
}

# A collection of Diagnostic objects produced by the compiler.
class Diagnostics {
  # The collection of diagnostics produced so far.
  @values: Array!(Diagnostic)

  # A boolean indicating that one or more errors have been produced.
  @errors: Boolean

  static def new -> Self {
    Self { @values = Array.new, @errors = False }
  }

  # Returns `True` if there are one or more error diagnostics.
  def errors? -> Boolean {
    @errors.clone
  }

  # Returns `True` if any diagnostics have been recorded.
  def any? -> Boolean {
    @values.length.positive?
  }

  # Appends the `Diagnostics` to `self`.
  def append(other: Diagnostics) {
    for diag in other.into_iter {
      if diag.level == ERROR { @errors = True }

      @values.push(diag)
    }
  }

  # Yields references to all diagnostics.
  def iter => ref Diagnostic {
    for diag in @values { yield diag }
  }

  # Yields all diagnostics as owned values.
  move def into_iter => Diagnostic {
    for diag in @values.into_iter { yield diag }
  }

  # Records a new error diagnostic.
  def error(message: ToString, location: SourceLocation) {
    let diag = Diagnostic
      .new(level: ERROR, message: message.to_string, location: location)

    @errors = True

    @values.push(diag)
  }

  # Records a new warning diagnostic.
  def warning(message: ToString, location: SourceLocation) {
    let diag = Diagnostic.new(
      level: WARNING,
      message: message.to_string,
      location: location
    )

    @values.push(diag)
  }

  def failed_to_read_source(message: String, path: Path) {
    error(
      message: `Failed to read {path}: {message}`,
      location: SourceLocation.new(file: path, line_range: 1..1, column: 1)
    )
  }

  def failed_to_parse(message: String, location: SourceLocation) {
    error(
      message: `Failed to parse {location.file}: {message}`,
      location: location
    )
  }

  def undefined_constant(name: String, location: SourceLocation) {
    error(message: `The constant "{name}" isn't defined`, location: location)
  }

  def undefined_identifier(name: String, location: SourceLocation) {
    let message = `There is no local variable, global variable, \
      or method with the name "{name}"`

    error(message: message, location: location)
  }

  def undefined_message(type: String, name: String, location: SourceLocation) {
    error(
      message: `The type "{type}" doesn't respond to the message "{name}"`,
      location: location
    )
  }

  def undefined_local_variable(name: String, location: SourceLocation) {
    error(
      message: `The local variable "{name}" is undefined`,
      location: location
    )
  }

  def undefined_attribute(
    type: String,
    attribute: String,
    location: SourceLocation
  ) {
    error(
      message: `The type "{type}" doesn't define the attribute "{attribute}"`,
      location: location
    )
  }

  def already_assigned_attribute(name: String, location: SourceLocation) {
    error(
      message: `The attribute "{}" is already assigned`,
      location: location
    )
  }

  def unassigned_attribute(name: String, location: SourceLocation) {
    error(
      message: `The attribute "{name}" must be assigned a value`,
      location: location
    )
  }

  def assign_immutable_local_variable(name: String, location: SourceLocation) {
    error(
      message: `The local variable "{name}" can't be reassigned`,
      location: location
    )
  }

  def import_existing_symbol(name: String, location: SourceLocation) {
    let message = `The symbol "{name}" can't be imported, \
      as it's already defined in this module`

    error(message: message, location: location)
  }

  def not_a_trait(name: String, location: SourceLocation) {
    error(message: `The type "{name}" must be a trait`, location: location)
  }

  def not_an_object(name: String, location: SourceLocation) {
    error(message: `The type "{name}" must be an object`, location: location)
  }

  def invalid_initialise(name: String, location: SourceLocation) {
    error(
      message: `The type "{name}" can't be initialised using type arguments`,
      location: location
    )
  }

  def invalid_number_of_type_arguments(
    expected: Int,
    given: Int,
    location: SourceLocation
  ) {
    let message = `Incorrect number of type arguments: \
      expected {expected}, found {given}`

    error(message: message, location: location)
  }

  def module_not_found(name: String, location: SourceLocation) {
    error(
      message: `The module "{name}" doesn't exist`,
      location: location
    )
  }

  def undefined_import_symbol(
    module: String,
    name: String,
    location: SourceLocation
  ) {
    error(
      message: `The module "{module}" doesn't define the symbol "{name}"`,
      location: location
    )
  }

  def invalid_trait_implementation(name: String, location: SourceLocation) {
    let message = `Traits can only be implemented for objects, \
      and "{name}" isn't an object`

    error(message: message, location: location)
  }

  def undefined_type_parameter(name: String, location: SourceLocation) {
    error(
      message: `The type parameter "{name}" is undefined`,
      location: location
    )
  }

  def duplicate_bound(name: String, location: SourceLocation) {
    let message = `Type parameter bounds for type parameter "{name}" \
      have already been defined`

    error(message: message, location: location)
  }

  def useless_method_bound(location: SourceLocation) {
    error(
      message: "Method type parameters can't be used for type parameter bounds",
      location: location
    )
  }

  def invalid_self_type(location: SourceLocation) {
    error(
      message: 'Self types can only be used when defining a method for an object or trait',
      location: location
    )
  }

  def redefine_local_variable(name: String, location: SourceLocation) {
    error(
      message: `The local variable "{name}" has already been defined`,
      location: location
    )
  }

  def redefine_constant(name: String, location: SourceLocation) {
    error(
      message: `The constant "{name}" has already been defined`,
      location: location
    )
  }

  def wrong_type(expected: String, given: String, location: SourceLocation) {
    let message = `Expected a value of type "{expected}", \
      instead of a value of type "{given}"`

    error(message: message, location: location)
  }

  def redefine_static_method(name: String, location: SourceLocation) {
    error(
      message: `The method "{name}" is already defined as a static method`,
      location: location
    )
  }

  def redefine_instance_method(name: String, location: SourceLocation) {
    error(
      message: `The method "{name}" is already defined as an instance method`,
      location: location
    )
  }

  def redefine_required_method(name: String, location: SourceLocation) {
    error(
      message: `The method "{name}" is already defined as a required method`,
      location: location
    )
  }

  def redefine_default_method(name: String, location: SourceLocation) {
    error(
      message: `The method "{name}" is already defined as a default method`,
      location: location
    )
  }

  def redefine_module_method(name: String, location: SourceLocation) {
    error(
      message: `The method "{name}" is already defined as a module method`,
      location: location
    )
  }

  def required_method_with_default_argument(location: SourceLocation) {
    error(
      message: 'Default arguments are not avaiable for required methods',
      location: location
    )
  }

  def required_method_not_implemented(method: String, location: SourceLocation) {
    error(
      message: `The method "{method}" must be implemented`,
      location: location
    )
  }

  def required_method_not_compatible(
    expected: String,
    given: String,
    location: SourceLocation
  ) {
    let message = `The implementation "{given}" isn't compatible with the \
      required method "{expected}"`

    error(message: message, location: location)
  }

  def default_method_not_compatible(
    expected: String,
    given: String,
    location: SourceLocation
  ) {
    let message = `The implementation "{given}" isn't compatible with the \
      default method "{expected}"`

    error(message: message, location: location)
  }

  def invalid_redefined_method(
    expected: String,
    given: String,
    location: SourceLocation
  ) {
    let message = `The method "{given}" isn't compatible with the original \
      definition "{expected}"`

    error(message: message, location: location)
  }

  def required_trait_not_implemented(
    required: String,
    depending: String,
    location: SourceLocation
  ) {
    let message = `The trait "{required}" must be implemented before the \
      trait "{depending}" can be implemented`

    error(message: message, location: location)
  }

  def invalid_return(location: SourceLocation) {
    error(
      message: 'The "return" keyword can only be used in methods and lambdas',
      location: location
    )
  }

  def match_not_exhaustive(location: SourceLocation) {
    error(
      message: 'You must add an "else" branch to make this match exhaustive',
      location: location
    )
  }

  def match_without_cases(location: SourceLocation) {
    error(
      message: 'At least a single pattern matching case is required',
      location: location
    )
  }

  def unavailable_type_match(location: SourceLocation) {
    error(
      message: 'This pattern can only be used when matching an expression',
      location: location
    )
  }

  def match_trait_not_implemented(
    type: String,
    match_trait: String,
    location: SourceLocation
  ) {
    let message = `This pattern is invalid because its type ("{type}") \
      doesn't implement the trait "{match_trait}"`

    error(message: message, location: location)
  }

  def match_trait_not_found(location: SourceLocation) {
    error(
      message: 'Pattern matching is not available as the Match trait is not yet defined',
      location: location
    )
  }

  def invalid_cast(type: String, cast_to: String, location: SourceLocation) {
    error(
      message: `The type "{type}" can't be casted to the type "{cast_to}"`,
      location: location
    )
  }

  def missing_argument_type(location: SourceLocation) {
    error(
      message: 'An explicit type or default value is required for this argument',
      location: location
    )
  }

  def missing_method_throw(type: String, location: SourceLocation) {
    let message = `This method is expected to throw a value of type "{type}", \
      but no value is ever thrown`

    error(message: message, location: location)
  }

  def missing_local_throw(type: String, location: SourceLocation) {
    let message = `This block is expected to throw a value of type "{type}", \
      but no value is ever thrown`

    error(message: message, location: location)
  }

  def missing_try(type: String, location: SourceLocation) {
    let message = `This message will throw a value of type "{type}", \
      and requires explicit error handling`

    error(message: message, location: location)
  }

  def missing_yield(type: String, location: SourceLocation) {
    let message = `This method is expected to yield a value of type "{type}", \
      but no value is ever yielded`

    error(message: message, location: location)
  }

  def cant_yield_and_return(location: SourceLocation) {
    error(
      message: "A method can't specify both a yield and return type",
      location: location
    )
  }

  def invalid_throw(location: SourceLocation) {
    error(
      message: 'The `throw` keyword can only be used in methods and lambdas',
      location: location
    )
  }

  def invalid_try(location: SourceLocation) {
    error(
      message: 'The `try` keyword without the `else` keyword can only be used in methods and lambdas',
      location: location
    )
  }

  def invalid_yield(location: SourceLocation) {
    error(
      message: 'The `yield` keyword can only be used in a method',
      location: location
    )
  }

  def expression_never_throws(location: SourceLocation) {
    error(message: 'This expression never throws', location: location)
  }

  def unexpected_nonlocal_throw(type: String, location: SourceLocation) {
    let message = `You can't throw a value of type "{type}", \
      as the surrounding method doesn't define a type to throw`

    error(message: message, location: location)
  }

  def unexpected_yield(type: String, location: SourceLocation) {
    let message = `You can't yield a value of type "{type}", as the \
      surrounding method doesn't define a type to throw`

    error(message: message, location: location)
  }

  def invalid_number_of_arguments(
    given: Int,
    expected: Int,
    location: SourceLocation
  ) {
    let message = `Incorrect number of arguments: expected "{expected}", \
      found "{given}"`

    error(message: message, location: location)
  }

  def undefined_keyword_argument(argument: String, location: SourceLocation) {
    error(
      message: `This message doesn't accept the argument "{argument}"`,
      location: location
    )
  }

  def duplicate_keyword_argument(
    argument: String,
    location: SourceLocation
  ) {
    error(
      message: `The argument "{argument}" is already given`,
      location: location
    )
  }

  def method_not_available(
    receiver: String,
    method: String,
    location: SourceLocation
  ) {
    let message = `The method "{method}" exists, but isn't available to \
      "{receiver}" as one or more type parameter bounds are not satistifed`

    error(message: message, location: location)
  }

  def unknown_instruction(name: String, location: SourceLocation) {
    error(message: `The instruction "{name}" doesn't exist`, location: location)
  }

  def instructions_not_available(location: SourceLocation) {
    error(
      message: 'VM instructions can only be used in the standard library',
      location: location
    )
  }

  def option_type_not_found(location: SourceLocation) {
    error(
      message: "The Option type hasn't been defined yet",
      location: location
    )
  }

  def unsupported_constructor(location: SourceLocation) {
    error(
      message: "This type doesn't support the constructor syntax",
      location: location
    )
  }

  def external_function_with_receiver(location: SourceLocation) {
    error(
      message: "External functions can't be used with a receiver",
      location: location
    )
  }
}

impl Length for Diagnostics {
  def length -> Int {
    @values.length
  }
}
