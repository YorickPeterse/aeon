# Types for tokens produced by the lexer.
import std::compiler::source_location::SourceLocation

# A single token produced by a `Lexer`.
trait Token {
  # Returns the type of the token.
  def type -> String

  # Returns the value of the token.
  def value -> String

  # Returns the source location of this token.
  def location -> ref SourceLocation

  # Returns a `Boolean` indicating if this token is a keyword.
  def keyword? -> Boolean {
    False
  }

  # Returns a `Boolean` indicating if this token is valid.
  def valid? -> Boolean {
    True
  }

  # Returns a `Boolean` indicating if this token is a null token.
  def null? -> Boolean {
    False
  }

  # Returns a `Boolean` indicating if this token is a token for a binary
  # operator.
  def binary? -> Boolean {
    False
  }

  # Returns a `Boolean` indicating if this token is a token for a binary
  # assignment such as `+=`.
  def binary_assign? -> Boolean {
    False
  }

  # Returns `True` if `self` and the given `Token` start on the same line
  # number.
  def same_line?(token: Self) -> Boolean {
    location.line_range.start == token.location.line_range.start
  }
}

# A regular token used for a variety of inputs.
class RegularToken {
  # The type of the token.
  @type: String

  # The value of the token.
  @value: String

  # The location of the token.
  @location: SourceLocation

  static def new(
    type: String,
    value: String,
    location: SourceLocation,
  ) -> Self {
    Self { @type = type, @value = value, @location = location }
  }
}

impl Token for RegularToken {
  def type -> String {
    @type.clone
  }

  def value -> String {
    @value.clone
  }

  def location -> ref SourceLocation {
    @location
  }
}

# A token used for keywords.
class KeywordToken {
  # The keyword of this token.
  @keyword: String

  # The location of the token.
  @location: SourceLocation

  static def new(keyword: String, location: SourceLocation) -> Self {
    Self { @keyword = keyword, @location = location }
  }
}

impl Token for KeywordToken {
  def type -> String {
    @keyword.clone
  }

  def value -> String {
    @keyword.clone
  }

  def location -> ref SourceLocation {
    @location
  }

  def keyword? -> Boolean {
    True
  }
}

# A token used for invalid input values.
class InvalidToken {
  # The value of the token.
  @value: String

  # The location of the token.
  @location: SourceLocation

  static def new(value: String, location: SourceLocation) -> Self {
    Self { @value = value, @location = location }
  }
}

impl Token for InvalidToken {
  def type -> String {
    'invalid'
  }

  def value -> String {
    @value.clone
  }

  def location -> ref SourceLocation {
    @location
  }

  def valid? -> Boolean {
    False
  }

  def keyword? -> Boolean {
    False
  }
}

# A token used for indicating a lexer has consumed all input.
class NullToken {
  # The location of the token.
  @location: SourceLocation

  static def new(location: SourceLocation) -> Self {
    Self { @location = location }
  }
}

impl Token for NullToken {
  def type -> String {
    'null'
  }

  def value -> String {
    ''
  }

  def location -> ref SourceLocation {
    @location
  }

  def valid? -> Boolean {
    False
  }

  def keyword? -> Boolean {
    False
  }

  def null? -> Boolean {
    True
  }
}

# A token used for binary operators.
class BinaryToken {
  # The type of the token.
  @type: String

  # The value of the token.
  @value: String

  # The location of the token.
  @location: SourceLocation

  static def new(
    type: String,
    value: String,
    location: SourceLocation,
  ) -> Self {
    Self {
      @type = type,
      @value = value,
      @location = location
    }
  }
}

impl Token for BinaryToken {
  def type -> String {
    @type.clone
  }

  def value -> String {
    @value.clone
  }

  def location -> ref SourceLocation {
    @location
  }

  def binary? -> Boolean {
    True
  }
}

# A token used for binary assignment operators.
class BinaryAssignToken {
  # The type of the token.
  @type: String

  # The value of the token.
  @value: String

  # The location of the token.
  @location: SourceLocation

  static def new(
    type: String,
    value: String,
    location: SourceLocation,
  ) -> Self {
    Self {
      @type = type,
      @value = value,
      @location = location
    }
  }
}

impl Token for BinaryAssignToken {
  def type -> String {
    @type.clone
  }

  def value -> String {
    @value.clone
  }

  def location -> ref SourceLocation {
    @location
  }

  def binary_assign? -> Boolean {
    True
  }
}
