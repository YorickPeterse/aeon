# Extensions for the `String` type that can only be defined later on in the
# bootstrapping process.
import std::byte_array::ToByteArray
import std::conversion::(ToFloat, ToInt)
import std::process::(panic)

extern def string_to_byte_array(string: ref String) -> ByteArray

# Returns `True` if a string separator starts at the given byte position.
#
# The `string` argument is the `String` to split, using the separator (as a
# sequence of bytes) specified in `separator`.
#
# The `start` argument specifies the byte position (in the `String`) to check
# for the separator.
def split_at?(
  string: String,
  separator: ref ByteArray,
  start: Int
) -> Boolean {
  if string.bytesize - start < separator.length { return False }

  for (index, byte) in separator.iter.with_index {
    if byte != string.byte(start + index) { return False }
  }

  True
}

impl ToByteArray for String {
  # Returns a `ByteArray` containing the bytes of this `String`.
  def to_byte_array -> ByteArray {
    string_to_byte_array(self) as ByteArray
  }
}

impl ToInt for String {
  # Converts `self` to an `Int`.
  #
  # The string is parsed in base 10. If the `String` can not be converted to
  # an `Int`, `0` is returned instead.
  #
  # # Examples
  #
  # Converting a `String` to an `Int`:
  #
  #     '10'.to_int # => 10
  #     'a'.to_int  # => 0
  def to_int -> Int {
    try Int.parse(string: self, radix: 10) else (_) 0
  }
}

impl ToFloat for String {
  # Converts `self` to a `Float`.
  #
  # If the `String` can not be converted to a `Float`, `0.0` is returned
  # instead.
  #
  # # Examples
  #
  # Converting a `String` to a `Float`:
  #
  #     '10.5'.to_float # => 10.5
  #     'a'.to_float    # => 0.0
  def to_float -> Float {
    try Float.parse(self.clone) else (_) 0.0
  }
}

impl String {
  # Slices `self` into a `ByteArray`.
  #
  # The returned `ByteArray` will contain all _bytes_ starting at the _byte_
  # position specified in `start`, and will contain up to `length` _bytes_.
  #
  # Just like `String.slice` the starting position can be negative, meaning the
  # slicing starts from the end of the `String`.
  #
  # This method will panic if the `length` argument is negative.
  #
  # # Examples
  #
  # Slicing a `String` into a `ByteArray`:
  #
  #     'inko'.slice_bytes(start: 0, length: 4).to_string # => 'inko'
  #
  # Slicing a `String` into a `ByteArray` using a negative start index:
  #
  #     'inko'.slice_bytes(start: -4, length: 4).to_string # => 'inko'
  def slice_bytes(start: Int, length: Int) -> ByteArray {
    if length.negative? {
      panic('The slice length must be zero or greater')
    }

    let bytes = ByteArray.new
    let total_bytes = bytesize
    let mut index = if start.negative? { start % total_bytes } else { start }
    let mut end_at = index + length

    if end_at > total_bytes { end_at = total_bytes }

    while index < end_at {
      bytes.push(byte(index))
      index += 1
    }

    bytes
  }

  # Splits `self` into an `Array` of `Strings`, each separated by the given
  # separator.
  #
  # This method yields the segments, instead of returning them as an `Array`.
  #
  # # Examples
  #
  # Splitting a `String` using a single character as the separator:
  #
  #     let iter = 'foo/bar/baz'.split('/')
  #
  #     iter.advance
  #     iter.current # => 'foo'
  #
  #     iter.advance
  #     iter.current # => 'bar'
  #
  # Splitting a `String` using multiple characters as the separator:
  #
  #     let iter = 'foo::bar::baz'.split('::')
  #
  #     iter.advance
  #     iter.current # => 'foo'
  #
  #     iter.advance
  #     iter.current # => 'bar'
  def split(separator: String) => String {
    if empty? { return }

    if separator.empty? or separator.length >= length {
      yield clone
      return
    }

    let buffer = ByteArray.new
    let sep_bytes = separator.to_byte_array
    let sep_start = sep_bytes[0]
    let mut index = 0
    let max = bytesize

    while index < max {
      let byte = byte(index)

      if byte == sep_start
        and split_at?(string: self.clone, separator: sep_bytes, start: index)
      {
        yield buffer.drain_to_string
        index += sep_bytes.length
      } else {
        buffer.push(byte)
        index += 1
      }
    }

    if not buffer.empty? { yield buffer.drain_to_string }
  }
}
