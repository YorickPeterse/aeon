# Types for core IO functionality.
#
# The IO module provides the basic building blocks for IO operations such as
# reading from and writing to a file.
import std::conversion::ToString
import std::error::(Error as ErrorTrait)

let OTHER_ERROR = 0
let NOT_FOUND = 1
let PERMISSION_DENIED = 2
let CONNECTION_REFUSED = 3
let CONNECTION_RESET = 4
let CONNECTION_ABORTED = 5
let NOT_CONNECTED = 6
let ADDR_IN_USE = 7
let ADDR_NOT_AVAILABLE = 8
let BROKEN_PIPE = 9
let ALREADY_EXISTS = 10
let INVALID_INPUT = 11
let INVALID_DATA = 12
let TIMED_OUT = 13
let WRITE_ZERO = 14
let INTERRUPTED = 15
let UNEXPECTED_EOF = 16

# The initial number of bytes to read in `Read.read_all`
let INITIAL_READ_ALL_SIZE = 1024

# The maximum number of bytes to read when using `Read.read_all`.
let MAX_READ_ALL_SIZE = 1024 * 1024

# An IO error.
#
# `Error` is thrown whenever an IO operation resulted in an error, such as when
# trying to access a non-existing file.
class Error {
  # The IO error code.
  @code: Int

  # The error message.
  @message: String

  # Returns a new `Error` according to the given error code.
  static def new(code: Int) -> Self {
    let message = match code {
      NOT_FOUND -> { 'The resource could not be found' }
      PERMISSION_DENIED -> {
        'The operation lacked the necessary privileges to complete'
      }
      CONNECTION_REFUSED -> {
        'The connection was refused by the remote server'
      }
      CONNECTION_RESET -> { 'The connection was reset by the remote server' }
      CONNECTION_ABORTED -> {
        'The connection was terminated by the remote server'
      }
      NOT_CONNECTED -> {
        'The operation failed because the connection has not yet been established'
      }
      ADDR_IN_USE -> { 'The address is already in use' }
      ADDR_NOT_AVAILABLE -> { 'The address is not available' }
      BROKEN_PIPE -> { 'The operation failed because a pipe was closed' }
      ALREADY_EXISTS -> { 'The resource already exists' }
      INVALID_INPUT -> { 'An input parameter is invalid' }
      INVALID_DATA -> { 'The supplied data is not valid for this operation' }
      TIMED_OUT -> { 'The operation timed out' }
      WRITE_ZERO -> {
        'The operation failed because not enough bytes were written'
      }
      INTERRUPTED -> { 'The operation was interrupted' }
      UNEXPECTED_EOF -> {
        'The operation failed because of an unexpected end-of-file'
      }
      else -> { 'An unknown IO error occurred' }
    }

    Self { @code = code, @message = message }
  }

  # Returns a new `Error` indicating invalid input.
  static def invalid_input(message: String) -> Self {
    Self { @code = INVALID_INPUT, @message = message }
  }

  # Returns the error code.
  def code -> ref Int {
    @code
  }
}

impl ToString for Error {
  def to_string -> String {
    `{@message} (error code: {@code})`
  }
}

impl ErrorTrait for Error {}

# A trait for closing streams, such as files and sockets.
trait Close {
  # Closes the IO stream.
  #
  # This method moves the receiver, ensuring it can't be used after the stream
  # is closed.
  move def close
}

# Trait for retrieving the size of an IO object.
trait Size {
  def size !! Error -> Int
}

# Trait for reading from a stream.
trait Read {
  # Reads bytes from a stream into a `ByteArray`.
  #
  # The return value is the number of bytes read.
  #
  # The `size` argument specifies how many bytes are to be read. The actual
  # number of bytes read may be less than this value.
  def read(into: ref ByteArray, size: Int) !! Error -> Int

  # Reads all bytes from the stream into the `ByteArray`.
  #
  # If an error is encountered while reading, this method stops reading any more
  # bytes and re-throws the error.
  #
  # The return value is the number of bytes read.
  def read_all(bytes: ref ByteArray) !! Error -> Int {
    let mut total = 0
    let mut read_size = INITIAL_READ_ALL_SIZE

    loop {
      let bytes_read = try read(into: bytes, size: read_size)

      if bytes_read == 0 { return total }

      total += bytes_read

      # To reduce the overhead of large buffer reads, we increase the buffer
      # size as more data is read.
      if read_size < MAX_READ_ALL_SIZE { read_size *= 2 }
    }
  }
}

# Trait for writing to a stream.
trait Write {
  # Writes an `Array` of bytes to the stream, returning the number of bytes
  # written.
  def write_bytes(bytes: ref ByteArray) !! Error -> Int

  # Writes a `ToString` to the stream, returning the number of bytes written.
  def write_string(string: ref ToString) !! Error -> Int

  # Flushes any pending writes.
  def flush !! Error

  # Writes the given `String` to the stream, followed by a LINE FEED (`\n`)
  # character.
  #
  # This method always uses `\n` as the newline separator.
  #
  # The return value is the number of bytes written to the stream.
  def print(data: ref ToString) !! Error -> Int {
    try write_string(`{data}\n`)
  }
}

# Trait for seeking to a given offset in a stream of bytes.
trait Seek {
  # Seeks to the given byte offset, returning the new offset.
  #
  # If `position` is negative, seeking is performed in reverse order relative to
  # the end.
  def seek(position: Int) !! Error -> Int
}
