# Methods for writing to STDERR.
#
# This module provides various methods for writing to STDERR. For example,
# printing a message to STDERR can be done as follows:
#
#     import std::stdio::stderr
#
#     stderr.print('Hello world!')
#
# Unlike other IO methods the methods in this module will not throw any errors,
# instead they will swallow them silently. This is done to make writing to
# STDERR more convenient as in almost all (if not all) cases a developer
# doesn't care if a write to STDERR succeeds or not.
import std::conversion::ToString
import std::io::Write
import std::process::(blocking)

extern def stderr_write_string(input: ref String) !! String -> Int
extern def stderr_write_bytes(input: ref ByteArray) !! String -> Int
extern def stderr_flush !! String

impl Write for ThisModule {
  # Writes a `ByteArray` of bytes to STDERR, returning the number of bytes
  # written.
  def write_bytes(bytes: ref ByteArray) -> Int {
    blocking { try stderr_write_bytes(bytes) else 0 }
  }

  # Writes a `ToString` to STDERR, returning the number of bytes written.
  #
  # # Examples
  #
  # Writing to STDERR:
  #
  #     import std::stdio::stderr
  #
  #     stderr.write_string('hello') # => 5
  def write_string(data: ref ToString) -> Int {
    blocking { try stderr_write_string(data.to_string) else 0 }
  }

  # Writes the given string-like object to STDERR, followed by a newline.
  #
  # # Examples
  #
  # Writing to STDERR:
  #
  #     import std::stdio::stderr
  #
  #     stderr.print('hello')
  #
  # You can also leave out a message to write, in which case only a newline is
  # written:
  #
  #     import std::stdio::stderr
  #
  #     stderr.print
  def print(data: ref ToString) -> Int {
    write_string(`{data}\n`)
  }

  def flush {
    blocking { try stderr_flush else Nil }
  }
}
