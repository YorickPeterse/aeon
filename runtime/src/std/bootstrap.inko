# A module for setting up the basic building blocks other modules depend on.
#
# This module is the very first module imported and executed. All constants
# defined in this module are available to all other modules.

# class Int {}
# class Float {}
# class String {}
# class Array {}
# class Block {}
# class Boolean {}
# class NilType {}
# class ByteArray {}
#
# _INKOC.set_class_id(Int, 0)
# _INKOC.set_class_id(Float, 1)
# _INKOC.set_class_id(String, 2)
# _INKOC.set_class_id(Array, 3)
# _INKOC.set_class_id(Block, 4)
# _INKOC.set_class_id(Boolean, 5)
# _INKOC.set_class_id(NilType, 6)
# _INKOC.set_class_id(ByteArray, 7)
#
# let True = _INKOC.get_true
# let False = _INKOC.get_false
# let Nil = _INKOC.get_nil
#
# # The Object trait provides basic functionality for all user-defined objects.
# #
# # The methods of this trait are _only_ available to instances of classes. Traits
# # and classes themselves (e.g. the String class) don't have access to these
# # methods. The are three reasons for this:
# #
# # 1. There is no common behaviour between traits and classes, each one is unique
# #    (e.g. classes may not define a `new` method).
# # 2. If simplifies method lookups, leading to better method call performance.
# # 3. It simply isn't useful. For example, what's the point of `Object.truthy?`?
# #    It's always going to be true anyway.
# #
# # This type is defined in `std::bootstrap` as it's needed early on in the
# # runtime bootstrapping process, and must be available to all modules.
# trait Object {
#   # Returns a boolean indicating if this object evaluates to True in a boolean
#   # context.
#   #
#   # # Examples
#   #
#   #     10.truthy?    # => True
#   #     False.truthy? # => False
#   def truthy? -> Boolean {
#     True
#   }
#
#   # Returns `True` if `self` and the given object are the exact same objects.
#   #
#   # Two objects are considered identical if they reside at the exact same
#   # memory address. This is also known as referential equality.
#   #
#   # This method should not be redefined by other objects, as doing so can break
#   # various parts of the Inko runtime.
#   def same_object?(other: ref Self) -> Boolean {
#     _INKOC.object_equals(self, other)
#   }
# }
#
# impl Object for Int {}
# impl Object for Float {}
# impl Object for String {}
# impl Object for Array {}
# impl Object for Block {}
# impl Object for Boolean {}
# impl Object for NilType {}
# impl Object for ByteArray {}

# All these constants will be available as globals to all other modules.
let Trait = _INKOC.get_trait_prototype
let Boolean = _INKOC.get_boolean_prototype
let True = _INKOC.get_true
let False = _INKOC.get_false
let Nil = _INKOC.get_nil
let NilType = _INKOC.get_nil_prototype
let String = _INKOC.get_string_prototype
let Int = _INKOC.get_integer_prototype
let Float = _INKOC.get_float_prototype
let Block = _INKOC.get_block_prototype
let Array = _INKOC.get_array_prototype
let ByteArray = _INKOC.get_byte_array_prototype

# Set the object names for the various built-in objects. Normally this is done
# automatically when creating an object using the `object` keyword. Since these
# built-ins are set up in the VM we must do this manually.
_INKOC.set_object_name(Trait, 'Trait')
_INKOC.set_object_name(Boolean, 'Boolean')
_INKOC.set_object_name(String, 'String')
_INKOC.set_object_name(NilType, 'NilType')
_INKOC.set_object_name(Int, 'Int')
_INKOC.set_object_name(Float, 'Float')
_INKOC.set_object_name(Array, 'Array')
_INKOC.set_object_name(Block, 'Block')
_INKOC.set_object_name(ByteArray, 'ByteArray')

# The Object trait provides basic functionality for all user-defined objects.
#
# The methods of this trait are _only_ available to instances of objects. Traits
# and objects themselves (e.g. the String type) don't have access to these
# methods. The are three reasons for this:
#
# 1. There is no common behaviour between traits and objects, each one is unique
#    (e.g. objects aren't required to all respond to `new`).
# 2. If simplifies method lookups, leading to better method call performance.
# 3. It simply isn't useful. For example, what's the point of `Object.truthy?`?
#    It's always going to be true anyway.
#
# This type is defined in `std::bootstrap` as it's needed early on in the
# runtime bootstrapping process, and must be available to all modules.
trait Object {
  # Returns a boolean indicating if this object evaluates to True in a boolean
  # context.
  #
  # # Examples
  #
  #     10.truthy?    # => True
  #     False.truthy? # => False
  def truthy? -> Boolean {
    True
  }

  # Returns `True` if `self` and the given object are the exact same objects.
  #
  # Two objects are considered identical if they reside at the exact same
  # memory address. This is also known as referential equality.
  #
  # This method should not be redefined by other objects, as doing so can break
  # various parts of the Inko runtime.
  def same_object?(other: ref Self) -> Boolean {
    _INKOC.object_equals(self, other)
  }
}

impl Object for Boolean {}
impl Object for NilType {}
impl Object for String {}
impl Object for Int {}
impl Object for Float {}
impl Object for Block {}
impl Object for Array {}
impl Object for ByteArray {}
