# The Int type.
import std::clone::(Clone, Copy)
import std::conversion::(ToInt, ToString, ToFloat)
import std::hash::Hash
import std::numeric::Numeric
import std::operators::*
import std::successor::Successor

extern def integer_to_string(integer: ref Int) -> String
extern def integer_to_float(integer: ref Int) -> Float
extern def integer_clone(integer: ref Int) -> Int

impl Clone for Int {
  def clone -> Self {
    integer_clone(self)
  }
}

impl Copy for Int {}

impl ToInt for Int {
  def to_int -> Int {
    clone
  }
}

impl ToFloat for Int {
  def to_float -> Float {
    integer_to_float(self)
  }
}

impl ToString for Int {
  def to_string -> String {
    integer_to_string(self)
  }
}

impl Add!(Int) for Int {
  def +(other: ref Int) -> Self {
    _INKOC.integer_add(self, other)
  }
}

impl Divide for Int {
  def /(other: ref Self) -> Self {
    _INKOC.integer_div(self, other)
  }
}

impl Multiply for Int {
  def *(other: ref Self) -> Self {
    _INKOC.integer_mul(self, other)
  }
}

impl Subtract!(Int) for Int {
  def -(other: ref Int) -> Self {
    _INKOC.integer_sub(self, other)
  }
}

impl Modulo for Int {
  def %(other: ref Self) -> Self {
    _INKOC.integer_mod(self, other)
  }
}

impl Smaller for Int {
  def <(other: ref Int) -> Boolean {
    _INKOC.integer_smaller(self, other)
  }
}

impl Greater for Int {
  def >(other: ref Int) -> Boolean {
    _INKOC.integer_greater(self, other)
  }
}

impl Equal for Int {
  def ==(other: ref Int) -> Boolean {
    _INKOC.integer_equals(self, other)
  }
}

impl GreaterOrEqual for Int {
  def >=(other: ref Int) -> Boolean {
    _INKOC.integer_greater_or_equal(self, other)
  }
}

impl SmallerOrEqual for Int {
  def <=(other: ref Int) -> Boolean {
    _INKOC.integer_smaller_or_equal(self, other)
  }
}

impl BitwiseAnd for Int {
  def &(other: ref Self) -> Self {
    _INKOC.integer_bitwise_and(self, other)
  }
}

impl BitwiseOr for Int {
  def |(other: ref Self) -> Self {
    _INKOC.integer_bitwise_or(self, other)
  }
}

impl BitwiseXor for Int {
  def ^(other: ref Self) -> Self {
    _INKOC.integer_bitwise_xor(self, other)
  }
}

impl ShiftLeft for Int {
  def <<(other: ref Self) -> Self {
    _INKOC.integer_shift_left(self, other)
  }
}

impl ShiftRight for Int {
  def >>(other: ref Self) -> Self {
    _INKOC.integer_shift_right(self, other)
  }
}

impl Match!(Int) for Int {
  # Returns `True` if `self` and the given `Int` are equal to each other.
  def =~(other: ref Int) -> Boolean {
    _INKOC.integer_equals(self, other)
  }
}

impl Numeric for Int {
  def negative? -> Boolean {
    self < 0
  }

  def positive? -> Boolean {
    self > 0
  }

  def zero? -> Boolean {
    self == 0
  }

  def absolute -> Self {
    if negative? { self - (self * 2) } else { clone }
  }

  def opposite -> Self {
    if positive? { 0 - self } else { self - (self * 2) }
  }
}

impl Successor for Int {
  # Returns the successor of `self`.
  #
  # # Examples
  #
  # Getting the successor of a positive integer:
  #
  #     1.successor  # => 2
  #     2.successor  # => 3
  #
  # Getting the successor of a negative integer:
  #
  #     -5.successor # => -4
  def successor -> Self {
    self + 1
  }
}

impl Hash for Int {}
