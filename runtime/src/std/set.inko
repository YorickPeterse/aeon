# A hash set implemented using a Map.
import std::hash::Hash
import std::iterator::Iterator
import std::length::Length
import std::map::Map
import std::operators::Equal

# A hash set implemented using a Map.
#
# The order of values in this Set are not guaranteed. For values to be stored in
# a `Set` they must implement the `Hash` and `Equal` traits.
class Set!(V: Hash + Equal) {
  # The Map used for storing values.
  #
  # The keys are the values inserted in this `Set`, the values are always set to
  # `True`.
  @map: Map!(V, Boolean)

  static def new -> Self {
    Self { @map = Map.new }
  }

  # Inserts a new value into the `Set`.
  #
  # The returned value is `True` if the value was inserted, `False` otherwise.
  #
  # # Examples
  #
  # Inserting a value into a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  def insert(value: V) -> Boolean {
    if @map.get(value) { return False }

    @map[value] = True
    True
  }

  # Removes a value from this `Set`.
  #
  # If the value was removed `True` is returned, otherwise `False` is returned.
  #
  # # Examples
  #
  # Removing an existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.remove(10) # => True
  #     set.remove(10) # => False
  #
  # Removing a non-existing value from a `Set`:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.remove(10) # => False
  def remove(value: ref V) -> Boolean {
    @map.remove(value).some?
  }

  # Returns an `Iterator` over the values in this `Set`.
  #
  # # Examples
  #
  # Creating an `Iterator` for the values:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.insert(10)
  #     set.insert(20)
  #
  #     set.iter.next # => 10
  def iter => ref V {
    for key in @map.keys { yield key }
  }

  # Returns `True` if this `Set` contains the given value.
  #
  # # Examples
  #
  # Checking if a `Set` contains a value:
  #
  #     import std::set::Set
  #
  #     let set = Set.new
  #
  #     set.contains?(10) # => False
  #     set.insert(10)
  #     set.contains?(10) # => True
  def contains?(value: ref V) -> Boolean {
    @map.key?(value)
  }
}

impl Equal for Set {
  # Returns `True` if `self` and the given `Set` are identical to each
  # other.
  #
  # # Examples
  #
  # Comparing two `Set` instances:
  #
  #     import std::set::Set
  #
  #     let set1 = Set.new
  #     let set2 = Set.new
  #
  #     set1.insert(10)
  #     set2.insert(10)
  #
  #     set1 == set2 # => True
  def ==(other: ref Self) -> Boolean {
    if length != other.length { return False }

    for value in self {
      if not other.contains?(value) { return False }
    }

    True
  }
}

impl Length for Set {
  # Returns the number of values in this `Set`.
  #
  # # Examples
  #
  # Using an empty `Set`:
  #
  #     import std::set::Set
  #
  #     Set.new.length # => 0
  #
  # Using a `Set` with one value:
  #
  #     let set = Set.new
  #
  #     set.insert('Alice')
  #
  #     set.length # => 1
  def length -> Int {
    @map.length
  }
}
