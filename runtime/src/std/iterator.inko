# External and internal iteration for collections.
#
# Iterators are objects that can be used to traverse collections such as an
# `Array` or a `Map`. Typically iterators are implemented in one of two
# ways:
#
# 1. Internal iterators: these kind of iterators take care of the iteration
#    process and operate using some kind of closure.
# 2. External iterators: these iterators use some kind of cursor stored
#    somewhere and require you to manually advance the iterator.
#
# Both have their benefits and drawbacks. Internal iterators are easy to
# implement and typically faster, as they don't require the allocation of
# additional data structures.
#
# External iterators can be composed together, suspended, and later resumed.
# External iterators can also be turned into internal iterators, while the inverse
# is not possible unless a language supports some form of coroutines or
# generators.
#
# Inko supports both internal and external iteration. When all you need is to
# iterate over some values, you can use internal iteration. If you need to
# compose iterators together, you can use external iteration.
#
# # Exposing Iterators
#
# The usual way of exposing an `Iterator` is by defining an `iter` method on a
# collection. If your collection can return different kinds of iterators you
# should use more descriptive method names such as `lines` for an `Iterator`
# that yields the lines in a file, or `characters` for an `Iterator` that
# returns the characters in a `String`.
import std::conversion::ToString
import std::hash::Hash
import std::operators::Equal
import std::option::Option
import std::pair::Pair
import std::string_buffer::StringBuffer

# A generator/semicoroutine that can be suspended and resumed.
let Generator = _INKOC.get_generator_prototype

impl Object for Generator {}

impl Generator {
  # Resumes the generator where it last left off.
  #
  # If a generator hasn't started yet, it will instead be started from the
  # beginning. If the generator method throws, `resume` will also throw;
  # requiring you to handle the error accordingly.
  #
  # The return value is the value produced by the generator wrapped in a Some.
  # If no value is produced, a None is returned instead.
  #
  # # Panics
  #
  # This method will panic if the generator has already finished.
  def resume !! E -> ?T {
    # The generator itself may throw an error, which we re-throw here.
    # Technically the explicit throw isn't necessary, but the explicit throw
    # should make it more clear an error may occur.
    try _INKOC.generator_resume(self) else (error) { throw error as E }

    # Obtaining the value throws when there is no value, which happens when a
    # generator finishes.
    try Option.some(_INKOC.generator_value(self) as T) else Option.none

    # TODO: use this new approach
    # _INKOC.generator_resume(self)

    # let value = try _INKOC.generator_value(self) else (error) throw error

    # if value == _INKOC.undefined {
    #   Option.none
    # } else {
    #   Option.some(value as T)
    # }
  }
}

impl Equal for Generator {}
impl Hash for Generator {}

# A generic iterator over a sequence of values of type `T`.
#
# The type parameter `T` is the type of values that is produced.
#
# The type parameter `E` is the error type that may be thrown. If an iterator
# doesn't throw, you can set this to `Never`.
trait Iterator!(T, E) {
  # Returns the next value in the iterator.
  #
  # If a value is produced, it must be wrapped in a Some; otherwise a None is to
  # be returned.
  def next !! E -> ?T

  # Returns an `Iterator` that yields pairs of indexes and values. The first
  # value of the pair is the current index (0, 1, 2, etc), the second value is
  # the iteration value.
  #
  # # Examples
  #
  #     let vals = Array.new('foo', 'bar')
  #     let iter = vals.iter.with_index
  #
  #     iter.next # => Option.some(Pair.new(0, 'foo'))
  #     iter.next # => Option.some(Pair.new(1, 'bar'))
  move def with_index !! E => Pair!(Int, T) {
    let mut index = 0

    for value in try self {
      yield Pair.new(index, value)

      index += 1
    }
  }

  # Returns an `Iterator` that transforms values of type `T` to values of type
  # `R`.
  #
  # # Examples
  #
  # Multiplying the numbers in an `Array`:
  #
  #     let mut iter = Array.new(1, 2, 3)
  #       .iter
  #       .map do (number) { number * 2 }
  #
  #     iter.to_array # => Array.new(2, 4, 6)
  move def map!(R)(block: do (T) -> R) !! E => R {
    for value in try self { yield block.call(value) }
  }

  # Returns the first value for which the supplied `Block` returns `True`.
  #
  # This method will advance the `Iterator` until either a value is found or we
  # run out of values.
  #
  # # Examples
  #
  # Finding the first number greated than 50 in an `Array`:
  #
  #     let numbers = Array.new(10, 20, 50, 80)
  #
  #     numbers.iter.find do (number) { number > 50 } # => 80
  def find(block: do (ref T) -> Boolean) !! E -> ?T {
    for value in try self {
      if block.call(value) { return Option.some(value) }
    }

    Option.none
  }

  # Calls the block for every value in the iterator, returning the first Some
  # value returned by the block.
  #
  # # Examples
  #
  #     let numbers = Array.new(10, 20, 30)
  #
  #     numbers.iter.find_some do (num) { Option.some(num) } # => Option.some(10)
  def find_some!(R)(block: do (T) -> ?R) !! E -> ?R {
    for value in try self {
      let opt = block.call(value)

      if opt { return opt }
    }

    Option.none
  }

  # Returns `True` if `self` contains any value for which the `block` argument
  # returned `True`.
  #
  # This method stops iterating over the values after the first matching value.
  #
  # # Examples
  #
  # Checking if an `Iterator` contains a value:
  #
  #     Array.new(10, 20, 30).iter.any? do (value) { value >= 20 } # => True
  def any?(block: do (T) -> Boolean) !! E -> Boolean {
    for value in try self {
      if block.call(value) { return True }
    }

    False
  }

  # Returns an `Iterator` that only produces values for which the supplied block
  # returned `True`.
  #
  # # Examples
  #
  # Selecting only certain values in an `Iterator`:
  #
  #     Array.new(10, 20, 30)
  #       .iter
  #       .select do (value) { value > 10 }
  #       .to_array # => Array.new(20, 30)
  move def select(block: do (ref T) -> Boolean) !! E => T {
    for value in try self {
      if block.call(value) { yield value }
    }
  }

  # Partitions the `Iterator` into a `Pair` of two `Array` objects.
  #
  # The first value of the `Pair` contains all values for which the supplied
  # block returned `True`. The second value contains all values for which the
  # block returned `False`.
  #
  # # Examples
  #
  # Partitioning an `Iterator`:
  #
  #     let values = Array.new(10, 20, 30, 40, 50)
  #     let pair = values.iter.partition do (value) { value >= 30 }
  #
  #     pair.0 # => Array.new(30, 40, 50)
  #     pair.1 # => Array.new(10, 20)
  move def partition(
    block: do (ref T) -> Boolean
  ) !! E -> Pair!(Array!(T), Array!(T)) {
    let true = Array.new
    let false = Array.new

    for value in try self {
      if block.call(value) { true.push(value) } else { false.push(value) }
    }

    Pair.new(true, false)
  }

  # Returns `True` if the supplied block returns `True` for _all_ values in
  # `self`.
  #
  # This method stops iterating over the values after the first value for which
  # the block returns `False`.
  #
  # # Examples
  #
  # Checking if all values in an `Iterator` match a condition:
  #
  #     Array.new(10, 20).iter.all? do (value) { value.positive? } # => True
  #     Array.new(-1, 20).iter.all? do (value) { value.positive? } # => False
  def all?(block: do (T) -> Boolean) !! E -> Boolean {
    for value in try self {
      if not block.call(value) { return False }
    }

    True
  }

  # Zips two `Iterator` objects together, producing a new `Iterator` that
  # produces a `Pair` containing the values of both `Iterator` objects.
  #
  # The returned `Iterator` stops iterating when one of the two zipped
  # `Iterator` objects runs out of values.
  #
  # # Examples
  #
  # Zipping two `Iterator` objects together:
  #
  #     let a = Array.new(10, 20, 30)
  #     let b = Array.new(40, 50, 60)
  #     let zip = a.iter.zip(b.iter)
  #
  #     zip.next # => Pair.new(10, 40)
  #
  # Zipping two `Iterator` objects with a different number of values:
  #
  #     let a = Array.new(10, 20, 30)
  #     let b = Array.new(40, 50)
  #     let zip = a.iter.zip(b.iter)
  #
  #     zip.next # => Pair.new(10, 40)
  move def zip!(U)(other: Iterator!(U, E)) !! E => Pair!(T, U) {
    for ours in try self {
      let theirs = try other.next

      yield Pair.new(ours, try theirs.get else return)
    }
  }

  # Joins the values produced by this `Iterator` together using the separator.
  #
  # # Examples
  #
  # Joining an empty `Iterator`:
  #
  #     Array.new.iter.join(',') # => ''
  #
  # Joining an `Iterator` with multiple values:
  #
  #     Array.new(10, 20, 30).iter.join(',') # => '10,20,30'
  move def join(separator: String) !! E -> String when T: ToString {
    let buffer = StringBuffer.new
    let mut index = 0

    for value in try self {
      if index.positive? { buffer.push(separator.clone) }

      buffer.push(value.to_string)
      index += 1
    }

    buffer.to_string
  }

  # Combines all values in the iterator into the specified accumulator.
  #
  # This method takes two arguments:
  #
  # 1. An accumulator to combine all values into.
  # 2. A closure that accepts two arguments: the accumulator and the current
  #    value.
  #
  # The closure returns the accumulator to return for the next value. The return
  # value of this method is the final accumulator.
  #
  # This method is called `inject` or `fold` in other languages.
  #
  # # Examples
  #
  # Summing all integers in an iterator:
  #
  #     let total = Array.new(1, 2, 3).iter.reduce(0) do (total, current) {
  #       total + current
  #     }
  #
  #     total # => 6
  #
  # At each step of the iteration, the `total` and `current` closure arguments
  # are set to the following values:
  #
  # | Element | total | current | return value
  # |:--------|:------|:--------|:-----------
  # | 0       | 0     | 1       | 1
  # | 1       | 1     | 2       | 3
  # | 2       | 3     | 3       | 6
  #
  # For the last element the return value is `6`, so the return value of the
  # reduce method is also `6`.
  move def reduce!(A)(accumulator: A, block: do (A, T) -> A) !! E -> A {
    let mut result = accumulator

    for value in try self { result = block.call(result, value) }

    result
  }

  # Returns an `Iterator` that produces chunks of values.
  #
  # Each chunk is up to the amount specified by the `size` argument. If the
  # number of values can't be evenly divided, the last chunk may contain fewer
  # than `size` elements.
  move def chunks(size: Int) !! E => Array!(T) {
    let mut chunk = Array.new

    for value in try self {
      if chunk.length == size {
        yield chunk

        # The supplied block may decide to continue using the Array, so we can't
        # clear it and reuse it; instead we must create a new one.
        chunk = Array.new(value)
      } else {
        chunk.push(value)
      }
    }

    if not chunk.empty? { yield chunk }
  }

  # Transforms the `Iterator` into an `Array`.
  #
  # This method will advance the iterator to the end.
  #
  # # Examples
  #
  # Transforming an `Iterator` back into an `Array`:
  #
  #     Array.new(1, 2, 3).iter.to_array # => Array.new(1, 2, 3)
  move def to_array !! E -> Array!(T) {
    let mut values = Array.new

    for value in try self { values.push(value) }

    values
  }
}

impl Iterator!(T, E) for Generator {
  def next !! E -> ?T {
    try resume
  }
}

# A type an `Iterator` can be created for.
trait ToIterator!(T, E) {
  # Returns an `Iterator` for the values in `self`.
  def iter !! E => T
}
