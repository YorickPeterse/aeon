# The Float type.
#
# Floats are implemented as IEEE 754 floats.
import std::clone::(Clone, Copy)
import std::conversion::(ToInt, ToString, ToFloat)
import std::hash::Hash
import std::numeric::Numeric
import std::operators::*

let INFINITY_LABEL = 'Infinity'
let NEGATIVE_INFINITY_LABEL = '-Infinity'

extern def float_ceil(float: ref Float) -> Float
extern def float_floor(float: ref Float) -> Float
extern def float_round(float: ref Float, decimals: Int) -> Float
extern def float_to_bits(float: ref Float) -> Int
extern def float_to_integer(float: ref Float) -> Int
extern def float_to_string(float: ref Float) -> String
extern def float_is_nan(float: ref Float) -> Boolean
extern def float_is_infinite(float: ref Float) -> Boolean
extern def float_clone(float: ref Float) -> Float

impl Clone for Float {
  def clone -> Self {
    float_clone(self)
  }
}

impl Copy for Float {}

impl Add!(Float) for Float {
  def +(other: ref Float) -> Self {
    _INKOC.float_add(self, other)
  }
}

impl Divide for Float {
  def /(other: ref Self) -> Self {
    _INKOC.float_div(self, other)
  }
}

impl Multiply for Float {
  def *(other: ref Self) -> Self {
    _INKOC.float_mul(self, other)
  }
}

impl Subtract!(Float) for Float {
  def -(other: ref Float) -> Self {
    _INKOC.float_sub(self, other)
  }
}

impl Modulo for Float {
  def %(other: ref Self) -> Self {
    _INKOC.float_mod(self, other)
  }
}

impl Smaller for Float {
  def <(other: ref Self) -> Boolean {
    _INKOC.float_smaller(self, other)
  }
}

impl Greater for Float {
  def >(other: ref Self) -> Boolean {
    _INKOC.float_greater(self, other)
  }
}

impl Equal for Float {
  def ==(other: ref Self) -> Boolean {
    _INKOC.float_equals(self, other)
  }
}

impl GreaterOrEqual for Float {
  def >=(other: ref Self) -> Boolean {
    _INKOC.float_greater_or_equal(self, other)
  }
}

impl SmallerOrEqual for Float {
  def <=(other: ref Self) -> Boolean {
    _INKOC.float_smaller_or_equal(self, other)
  }
}

impl Match!(Float) for Float {
  # Returns `True` if `self` and the given `Float` are equal to each other.
  def =~(other: ref Float) -> Boolean {
    _INKOC.float_equals(self, other)
  }
}

impl Numeric for Float {
  def negative? -> Boolean {
    self < 0.0
  }

  def positive? -> Boolean {
    self > 0.0
  }

  def zero? -> Boolean {
    self == 0.0
  }

  def absolute -> Self {
    if infinite? { return INFINITY }
    if negative? { return self - (self * 2.0) }

    clone
  }

  def opposite -> Self {
    if positive? { return 0.0 - self }
    if infinite? { return INFINITY }

    self - (self * 2.0)
  }
}

impl Float {
  # Returns `True` if `self` is not a number (NAN).
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     10.5.not_a_number? => False
  #
  # Using a NAN value:
  #
  #     0.0 / 0.0
  #       .not_a_number? # => True
  def not_a_number? -> Boolean {
    float_is_nan(self)
  }

  # Returns `True` if `self` is an infinite number.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     10.5.infinite? # => False
  #
  # Using an infinite number:
  #
  #     10.0 / 0.0
  #       .infinite? # => True
  def infinite? -> Boolean {
    float_is_infinite(self)
  }

  # Returns `True` if `self` is neither infinite nor `NAN`.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     10.5.finite? # => True
  #
  # Using a NAN value:
  #
  #     0.0 / 0.0
  #       .finite? # => False
  #
  # Using an infinite value:
  #
  #     10.0 / 0.0
  #       .finite? # => False
  def finite? -> Boolean {
    if not_a_number? or infinite? { False } else { True }
  }

  # Returns the largest number less than or equal to `self`.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.floor # => 3.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     import std::float::NAN
  #
  #     NAN.floor.not_a_number? # => True
  def floor -> Float {
    float_floor(self)
  }

  # Returns the smallest number greater than or equal to `self`.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.ceil # => 4.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     import std::float::NAN
  #
  #     NAN.ceil.not_a_number? # => True
  def ceil -> Float {
    float_ceil(self)
  }

  # Rounds `self` to the nearest number.
  #
  # The `decimals` argument can be used to control the number of decimals of
  # the returned `Float`. When a negative value is used, the number is rounded
  # on the lef hand side of the decimal point.
  #
  # # Examples
  #
  # Using a regular float:
  #
  #     3.5.round # => 3.0
  #
  # Rounding to a given number of decimals:
  #
  #     3.123.round(1) # => 3.1
  #
  # Rounding a number using a negative number of decimals:
  #
  #     34567.89.round(-2) # => 34600.0
  #
  # Using a NAN value will produce a new NAN:
  #
  #     import std::float::NAN
  #
  #     NAN.round.not_a_number? # => True
  def round(decimals: Int) -> Float {
    float_round(self, decimals)
  }

  # Returns the fractional part of this float.
  #
  # # Examples
  #
  # Returning the fractional:
  #
  #     3.5.fract => 0.5
  def fractional -> Float {
    absolute % 1.0
  }

  # Returns the bitwise representation of `self`, as an `Int`.
  #
  # This does not _cast_ the `Float`, instead the returned `Int` has all
  # the bits set that make up `self`.
  #
  # # Examples
  #
  # Converting a `Float` to its bitwise representation:
  #
  #     1.0.to_bits # => 4607182418800017408
  def to_bits -> Int {
    float_to_bits(self)
  }
}

impl ToInt for Float {
  # Converts a `Float` to an `Int`.
  #
  # The `Float` will be rounded towards zero. Converting a `NAN`, `INFINITY`,
  # or `NEGATIVE_INFINITY` to an `Int` will result in a panic.
  def to_int -> Int {
    float_to_integer(self)
  }
}

impl ToFloat for Float {
  def to_float -> Float {
    clone
  }
}

impl ToString for Float {
  # Converts `self` to a `String.
  #
  # # Examples
  #
  # Converting a positive float:
  #
  #     10.5.to_string # => '10.5'
  #
  # Converting a negative float:
  #
  #     -10.5.to_string # => '-10.5'
  #
  # Converting a NAN:
  #
  #     import std::float::NAN
  #
  #     NAN.to_string # => 'NAN'
  #
  # Converting an infinite number:
  #
  #     import std::float::INFINITY
  #
  #     INFINITY.to_string # => 'INFINITY'
  def to_string -> String {
    if infinite? and positive? { return INFINITY_LABEL }
    if infinite? { return NEGATIVE_INFINITY_LABEL }
    if not_a_number? { return 'NaN' }

    float_to_string(self)
  }
}

impl Hash for Float {}

# The NAN (Not A Number) value.
let NAN = 0.0 / 0.0

# The infinity value.
let INFINITY = 1.0 / 0.0

# The negative infinity value.
let NEGATIVE_INFINITY = -1.0 / 0.0
