# Inspection and manipulation of the current OS process' environment.
#
# This module provides methods for inspecting and manipulating environment
# details of the current OS process, such as the environment variables.
import std::conversion::ToString
import std::fs::path::Path
import std::index::(Index, SetIndex)
import std::io::Error
import std::map::Map
import std::option::Option

extern def env_get(name: ref String) !! Int -> String
extern def env_set(name: ref String, value: String)
extern def env_remove(name: ref String)
extern def env_variables -> Array!(String)
extern def env_home_directory !! NilType -> String
extern def env_temp_directory -> String
extern def env_get_working_directory !! Int -> String
extern def env_set_working_directory(path: ref String) !! Int -> String
extern def env_arguments -> Array!(String)
extern def env_executable !! Int -> String

impl Index!(String, String) for ThisModule {
  # Returns the value of an environment variable.
  #
  # # Examples
  #
  # Obtaining the value of an environment variable:
  #
  #     import std::env
  #
  #     env['HOME'] # => '/home/alice'
  #
  # # Panics
  #
  # This method panics if the environment variable isn't set.
  def [](name: String) -> String {
    try {
      env_get(name)
    } else {
      _INKOC.panic(`The environment variable {name} isn't set`)
    }
  }
}

impl SetIndex!(String, String) for ThisModule {
  # Defines an environment variable.
  #
  # If the variable already exists it will be overwritten.
  #
  # The return value is always the new value of the environment variable.
  #
  # # Examples
  #
  # Setting an environment variable:
  #
  #     import std::env
  #
  #     env['HOME'] = '/home/bob'
  #
  #     env['HOME'] # => '/home/bob'
  def []=(name: String, value: String) {
    env_set(name, value)
  }
}

# Returns the value of an environment variable.
#
# # Examples
#
# Obtaining the value of an environment variable:
#
#     import std::env
#
#     env.get('HOME') # => '/home/alice'
def get(name: String) -> ?String {
  Option.some(try env_get(name) else return Option.none)
}

# Removes an environment variable.
#
# # Example
#
# Removing a variable:
#
#     import std::env
#
#     env['FOO'] = 'foo'
#
#     env.remove('FOO') # => Nil
#     env['FOO']        # => Option.none
def remove(variable: String) {
  env_remove(variable)
}

# Returns all defined environment variables and their values.
#
# # Examples
#
# Obtaining all environment variables and their values:
#
#     import std::env
#
#     env.variables # => Map { 'HOME': '/home/alice', ... }
def variables -> Map!(String, String) {
  let map = Map.new

  for name in env_variables.into_iter {
    map[name] = try get(name).get else next
  }

  map
}

# Returns the path to the current user's home directory.
#
# # Examples
#
# Obtaining the home directory of a user:
#
#     import std::env
#
#     env.home_directory # => '/home/alice'
def home_directory -> ?Path {
  let path = try env_home_directory else return Option.none

  Option.some(path.into_path)
}

# Returns the path to the temporary directory.
#
# # Examples
#
# Obtaining the temporary directory:
#
#     import std::env
#
#     env.temporary_directory # => '/tmp'
def temporary_directory -> Path {
  env_temp_directory.into_path
}

# Returns the current working directory.
#
# This method will throw if the directory could not be obtained. Possible
# causes for this could be:
#
# 1. The directory no longer exists.
# 1. You do not have the permissions to access the directory.
#
# # Examples
#
# Obtaining the current working directory:
#
#     import std::env
#
#     try! env.working_directory # => '/home/alice/example'
def working_directory !! Error -> Path {
  let path = try env_get_working_directory else (err) throw Error.new(err)

  path.into_path
}

# Changes the current working directory to the given directory.
#
# The return value is always the directory provided to this method.
#
# This method will throw if the directory could not be changed.
#
# # Examples
#
# Changing the current working directory:
#
#     import std::env
#
#     try! env.working_directory = '..' # => '..'
def working_directory=(directory: ref ToString) !! Error -> Path {
  let path = try {
    env_set_working_directory(directory.to_string)
  } else (err) {
    throw Error.new(err)
  }

  path.into_path
}

# Returns an `Array` containing all the commandline arguments passed to the
# current program.
#
# # Examples
#
#     import std::env
#
#     # Assuming this program is executed using `inko foo.inko first second`:
#     env.arguments # => Array.new('first', 'second')
def arguments -> Array!(String) {
  env_arguments
}

# Returns the path to the current executable.
#
# If the program is executed through a symbolic link, the returned path may
# point to the symbolic link instead of the executable the link points to.
def executable !! Error -> Path {
  let path = try { env_executable } else (code) throw Error.new(code)

  path.into_path
}
