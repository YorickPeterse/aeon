# Runtime debugging functionality
#
# This module provides various facilities for debugging programs during
# runtime, such as obtaining stack traces.
import std::fs::path::(IntoPath, Path)
import std::hash::Hash
import std::operators::Equal

extern def process_stacktrace(
  limit: ref Int,
  skip: ref Int
) -> Array!(Array!(Any))

# Details of a single stack frame in a stack trace.
class StackFrame {
  # The path of the file the frame belongs to.
  @path: Path

  # The name of the block of code the frame belongs to.
  @name: String

  # The line number the stack frame originates from.
  @line: Int

  static def new(path: IntoPath, name: String, line: Int) -> Self {
    Self { @path = path.into_path, @name = name, @line = line }
  }

  # Returns the path of the file the frame belongs to.
  def path -> ref Path {
    @path
  }

  # Returns the name of the block of code the frame belongs to.
  def name -> String {
    @name.clone
  }

  # Returns the line number of the frame.
  def line -> Int {
    @line.clone
  }
}

# Returns a stack trace leading up to the line that called this method.
#
# The stack trace is returned in reverse order. This means that the most recent
# stack frame is the last value in the returned `Array`.
#
# The returned stack trace does not include the frame for this method itself.
#
# # Skipping
#
# The `skip` argument can be set to an integer to skip a number of stack frames.
# By default this is set to skip the first frame, ensuring that this method
# itself does not appear in the returned stack.
#
# # Limit
#
# An optional limit can be specified to limit the number of stack frames to the
# given number, starting with the most recent stack frame. If this limit is 0,
# all frames are included.
#
# # Example
#
# Returning the trace of a method call:
#
#     import std::debug::(self, StackFrame)
#
#     def first -> StackFrame {
#       second
#     }
#
#     def second -> StackFrame {
#       debug.stacktrace(skip: 1, limit: 0)[-1]
#     }
#
#     first.name # => 'second'
#     first.line # => 8
def stacktrace(skip: Int, limit: Int) -> Array!(StackFrame) {
  let mut raw_frames = process_stacktrace(limit, skip)
  let mut frames = Array.new

  for raw_frame in raw_frames.into_iter {
    let (path: String, name: String, line: Int) = raw_frame

    frames.push(StackFrame.new(path, name, line))
  }

  frames
}

impl Equal for StackFrame {}
impl Hash for StackFrame {}
