# The string type
#
# Strings are UTF-8 encoded and immutable. A String must _always_ contain valid
# UTF-8.
import std::clone::(Clone, Copy)
import std::conversion::(ToFloat, ToInt, ToString)
import std::hash::Hash
import std::length::Length
import std::operators::(Add, Equal, Match)

extern def string_to_lower(string: ref String) -> String
extern def string_to_upper(string: ref String) -> String
extern def string_slice(
  string: ref String,
  start: ref Int,
  size: ref Int
) -> String

extern def string_clone(string: ref String) -> String

impl String {
  # Returns the uppercase equivalent of the current `String`.
  #
  # # Examples
  #
  # Converting a `String` containing only ASCII symbols:
  #
  #     'hello'.to_uppercase # => 'HELLO'
  #
  # Converting a `String` containing Unicode symbols:
  #
  #     'ä'.to_uppercase # => 'Ä'
  #
  # Converting a `String` containing both ASCII and Unicode symbols:
  #
  #     'aä'.to_uppercase # => 'AÄ'
  def to_uppercase -> String {
    string_to_upper(self)
  }

  # Returns the lowercase equivalent of the current `String`.
  #
  # # Examples
  #
  # Converting a `String` containing only ASCII symbols:
  #
  #     'HELLO'.to_lowercase # => 'hello'
  #
  # Converting a `String` containing Unicode symbols:
  #
  #     'Ä'.to_lowercase # => 'ä'
  #
  # Converting a `String` containing both ASCII and Unicode symbols:
  #
  #     'AÄ'.to_lowercase # => 'aä'
  def to_lowercase -> String {
    string_to_lower(self)
  }

  # Returns the size of the `String` in bytes.
  #
  # # Examples
  #
  # Getting the size of a `String`:
  #
  #     'foo'.bytesize # => 3
  def bytesize -> Int {
    _INKOC.string_size(self)
  }

  # Returns the byte at the given byte index.
  #
  # # Examples
  #
  # Obtaining a single byte from a `String`:
  #
  #     'inko'.byte(0) # => 105
  #
  # You can also use a negative index to access a byte from the back of the
  # `String`:
  #
  #     'inko'.byte(-1) # => 111
  def byte(index: Int) -> Int {
    _INKOC.string_byte(self, index)
  }

  # Slices `self` into a substring.
  #
  # Slicing a string allows one to extract a substring by providing a start
  # position and the number of _characters_ to include starting at the start
  # position.
  #
  # This method will panic if the `length` argument is negative.
  #
  # # Examples
  #
  # Slicing a `String`:
  #
  #     'hello_world'.slice(start: 0, length: 5) # => 'hello'
  #
  # If the `length` argument is greater than the available amount of characters
  # we only include the characters until the end of the `String`:
  #
  #     'hello_world'.slice(start: 0, length: 100) # => 'hello_world'
  #
  # Similar to indexing an `Array` you can use a negative `start` position:
  #
  #     'hello_world'.slice(start: -1, length: 5) # => 'world'
  def slice(start: Int, length: Int) -> String {
    if length.negative? {
      _INKOC.panic('The slice length must be zero or greater')
    }

    string_slice(self, start, length)
  }

  # Returns `True` if `self` starts with the given `String`.
  #
  # # Examples
  #
  # Checking if a `String` starts with another `String`:
  #
  #     'test_starts_with'.starts_with?('test_') # => True
  #     'hello'.starts_with?('test_')            # => False
  def starts_with?(prefix: String) -> Boolean {
    if prefix.length > length { return False }

    slice(start: 0, length: prefix.length) == prefix
  }

  # Returns `True` if `self` ends with the given `String`.
  #
  # # Examples
  #
  # Checking if a `String` ends with another `String`:
  #
  #     'hello_world'.ends_with?('world') # => True
  #     'hello'.ends_with?('world')       # => False
  def ends_with?(suffix: String) -> Boolean {
    let suffix_len = suffix.length
    let start = length - suffix_len

    # if "suffix" is longer than "self" we produce a negative index. In this
    # case "self" will never start with "suffix".
    if start.negative? { return False }

    slice(start, suffix_len) == suffix
  }
}

impl Clone for String {
  def clone -> Self {
    string_clone(self)
  }
}

impl Copy for String {}

impl ToString for String {
  # Returns the current `String`.
  #
  # # Examples
  #
  # Converting a `String` to a `String`:
  #
  #     'hello'.to_string # => 'hello'
  def to_string -> String {
    clone
  }
}

impl Length for String {
  # Returns the number of characters (_not_ bytes) in this `String`.
  #
  # # Examples
  #
  # Getting the length of an ASCII `String`:
  #
  #     'foo'.length # => 3
  #
  # Getting the length of a Unicode `String`:
  #
  #     '쿠키'.length # => 2
  def length -> Int {
    _INKOC.string_length(self)
  }
}

impl Equal for String {
  # Returns `True` if the current `String` and `other` are equal to each other.
  #
  # # Examples
  #
  # Returns `True` if two Strings are equal:
  #
  #     'foo' == 'foo' # => True
  #
  # Returns `False` if two Strings are not equal:
  #
  #     'foo' == 'bar' # => False
  def ==(other: ref Self) -> Boolean {
    _INKOC.string_equals(self, other)
  }
}

impl Hash for String {}

impl Add!(String) for String {
  # Concatenates `self` and the given `String`, returning a new `String`.
  #
  # # Examples
  #
  # Concatenating two `String` objects:
  #
  #     'hello ' + 'world' # => 'hello world'
  def +(other: ref String) -> Self {
    _INKOC.string_concat(self, other)
  }
}

impl Match!(String) for String {
  # Returns `True` if `self` and the given `String` are equal to each other.
  def =~(other: ref String) -> Boolean {
    _INKOC.string_equals(self, other)
  }
}
